# coding: utf-8

"""
    FastAPI

    An API for our smart search engine that provides the agent that best fits your needs.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AgentAsi1InteractionDetailed(BaseModel):
    """
    AgentAsi1InteractionDetailed
    """ # noqa: E501
    agent_identifier: Annotated[str, Field(strict=True)]
    from_verifier: Optional[StrictBool] = False
    request: StrictStr
    response: StrictStr
    success: StrictBool
    timestamp: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["agent_identifier", "from_verifier", "request", "response", "success", "timestamp"]

    @field_validator('agent_identifier')
    def agent_identifier_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(mainnet|testnet)_agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", value):
            raise ValueError(r"must validate the regular expression /^(mainnet|testnet)_agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentAsi1InteractionDetailed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentAsi1InteractionDetailed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agent_identifier": obj.get("agent_identifier"),
            "from_verifier": obj.get("from_verifier") if obj.get("from_verifier") is not None else False,
            "request": obj.get("request"),
            "response": obj.get("response"),
            "success": obj.get("success"),
            "timestamp": obj.get("timestamp")
        })
        return _obj


