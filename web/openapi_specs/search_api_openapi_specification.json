{ "openapi": "3.0.0", "info": { "title": "FastAPI", "description": "An API for our smart search engine that provides the agent that best fits your needs.", "version": "0.1.0" }, "servers": [ { "url": "https://agentverse.ai" } ], "paths": { "/v1/search/agents": { "post": { "tags": [ "search", "public", "agents" ], "summary": "Search Agents", "description": "Search for agents.", "operationId": "search_agents", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSearchRequest" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSearchResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/agents/geo": { "post": { "tags": [ "search", "public", "agents" ], "summary": "Search Agent By Geolocation", "description": "Searches for agents by geolocation. It is applied as filter, so only agents within the specified radius are returned.\n\nIf in the payload `include_geo_in_relevancy` is set to `True`, the geo location of the agent is used in the relevancy score, in which case set a large enough radius!", "operationId": "search_agent_by_geolocation", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentGeoSearchRequest" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSearchResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/agents/click": { "post": { "tags": [ "search", "public", "agents" ], "summary": "Feedback", "operationId": "feedback", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SearchFeedbackRequest" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } } }, "components": { "schemas": { "Agent": { "properties": { "address": { "type": "string", "title": "Address", "description": "the address of the agent (this should be used as the id of the agent)" }, "prefix": { "allOf": [ { "$ref": "#/components/schemas/NetProtocol" } ], "description": "In which net it is running (mainnet or test-net)" }, "name": { "type": "string", "title": "Name", "description": "the public name of the agent" }, "description": { "type": "string", "title": "Description", "description": "the short description of the agent" }, "readme": { "type": "string", "title": "Readme", "description": "the contents of the readme file" }, "protocols": { "items": { "$ref": "#/components/schemas/Protocol" }, "type": "array", "title": "Protocols", "description": "the list of protocols supported by the agent" }, "avatar_href": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Avatar Href", "description": "the href for the avatar image for the agent", "nullable": true }, "total_interactions": { "type": "integer", "title": "Total Interactions", "description": "the total interactions for this agent" }, "recent_interactions": { "type": "integer", "title": "Recent Interactions", "description": "the number of interactions in the last 90 days" }, "rating": { "anyOf": [ { "type": "number" }, { "type": "null" } ], "title": "Rating", "description": "agent rating a number between 0 and 5", "nullable": true }, "status": { "allOf": [ { "$ref": "#/components/schemas/StatusType" } ], "description": "the status if the agent" }, "type": { "allOf": [ { "$ref": "#/components/schemas/AgentType" } ], "description": "the type of agent" }, "featured": { "type": "boolean", "title": "Featured", "description": "signaled if the agent is featured or not", "default": false }, "category": { "allOf": [ { "$ref": "#/components/schemas/AgentCategory" } ], "description": "the creator of the agent" }, "system_wide_tags": { "items": { "type": "string" }, "type": "array", "title": "System Wide Tags", "description": "the system-wide tags assigned to the agent" }, "geo_location": { "anyOf": [ { "$ref": "#/components/schemas/AgentGeoLocation" }, { "type": "null" } ], "description": "the geolocation of the agent", "nullable": true }, "domain": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Domain", "description": "the domain of the agent", "nullable": true }, "metadata": { "anyOf": [ { "additionalProperties": { "anyOf": [ { "type": "string" }, { "items": { "type": "string" }, "type": "array" }, { "additionalProperties": { "type": "string" }, "type": "object" } ] }, "type": "object" }, { "type": "null" } ], "title": "Metadata", "description": "the registration attestation metadata associated with the agent", "nullable": true }, "last_updated": { "type": "string", "format": "date-time", "title": "Last Updated", "description": "the time at which the agent was last updated at" }, "created_at": { "type": "string", "format": "date-time", "title": "Created At", "description": "the time at which the agent was first visible or created" }, "recent_success_rate": { "anyOf": [ { "type": "number" }, { "type": "null" } ], "title": "Recent Success Rate", "description": "percentage of recent successful responses given by this agent when interacting with ASI1", "nullable": true } }, "type": "object", "required": [ "address", "prefix", "name", "description", "readme", "protocols", "total_interactions", "recent_interactions", "status", "type", "category", "system_wide_tags", "last_updated", "created_at" ], "title": "Agent" }, "AgentCategory": { "type": "string", "enum": [ "fetch-ai", "community" ], "title": "AgentCategory" }, "AgentContract": { "type": "string", "enum": [ "mainnet", "testnet" ], "title": "AgentContract", "description": "Represents the Almanac contract where the agent is registered" }, "AgentFilters": { "properties": { "state": { "items": { "$ref": "#/components/schemas/StatusType" }, "type": "array", "title": "State", "description": "The state of the agent, i.e. is it alive or not" }, "category": { "items": { "$ref": "#/components/schemas/AgentCategory" }, "type": "array", "title": "Category", "description": "The category of the creator of the agent" }, "agent_type": { "items": { "$ref": "#/components/schemas/AgentType" }, "type": "array", "title": "Agent Type", "description": "The category of how the agent is hosted" }, "protocol_digest": { "items": { "type": "string" }, "type": "array", "title": "Protocol Digest", "description": "The digest(s) of the protocol(s) that belong(s) to the agent" }, "has_location": { "type": "boolean", "title": "Has Location", "description": "If set to True, it will filter for agents that have a geo location specified", "default": false }, "has_readme": { "type": "boolean", "title": "Has Readme", "description": "If set to True, it will filter for agents that have a non-empty readme", "default": false }, "n_interactions": { "anyOf": [ { "$ref": "#/components/schemas/InteractionsThreshold" }, { "type": "null" } ], "description": "If specified, it will filter for agents that have a number of message_recent_interactions greater than the given threshold" }, "tags": { "items": { "type": "string" }, "type": "array", "title": "Tags", "description": "The tag(s) associated to the agent" } }, "additionalProperties": false, "type": "object", "title": "AgentFilters", "description": "The set of filters that should be applied to the agent search entries" }, "AgentGeoFilter": { "properties": { "latitude": { "type": "number", "maximum": 90.0, "minimum": -90.0, "title": "Latitude", "description": "The latitude of the location" }, "longitude": { "type": "number", "maximum": 180.0, "minimum": -180.0, "title": "Longitude", "description": "The longitude of the location" }, "radius": { "type": "number", "exclusiveMinimum": 0.0, "title": "Radius", "description": "The radius of the search in meters" } }, "additionalProperties": false, "type": "object", "required": [ "latitude", "longitude", "radius" ], "title": "AgentGeoFilter", "description": "The geo filter that can be applied to the agent search" }, "AgentGeoLocation": { "properties": { "name": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Name", "description": "the full agent location" }, "description": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Description", "description": "the description of the agent location" }, "latitude": { "anyOf": [ { "type": "number" }, { "type": "null" } ], "title": "Latitude", "description": "the latitude of the agent location" }, "longitude": { "anyOf": [ { "type": "number" }, { "type": "null" } ], "title": "Longitude", "description": "the longitude of the agent location" }, "radius": { "anyOf": [ { "type": "number" }, { "type": "null" } ], "title": "Radius", "description": "the radius in meters defining the area of effect of the agent" }, "street": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Street", "description": "the street where the agent is located" }, "city": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "City", "description": "the city where the agent is located" }, "state": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "State", "description": "the state where the agent is located" }, "postal_code": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Postal Code", "description": "the postal code where the agent is located" }, "country": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Country", "description": "the country where the agent is located" }, "url": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Url", "description": "the url belonging to the agent location" }, "image_url": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Image Url", "description": "the image url belonging to the agent location" } }, "type": "object", "title": "AgentGeoLocation" }, "AgentGeoSearchRequest": { "properties": { "filters": { "allOf": [ { "$ref": "#/components/schemas/AgentFilters" } ], "default": { "state": [], "category": [], "agent_type": [], "protocol_digest": [], "has_location": false, "has_readme": false, "tags": [] } }, "sort": { "allOf": [ { "$ref": "#/components/schemas/SortType" } ], "description": "The type of sorting that should be applied to the search results", "default": "relevancy" }, "direction": { "allOf": [ { "$ref": "#/components/schemas/Direction" } ], "description": "The direction of the sorting, ascending or descending", "default": "desc" }, "cutoff": { "allOf": [ { "$ref": "#/components/schemas/RelevancyCutoff" } ], "description": "Controls how strictly the search results should be filtered based on their relevancy", "default": "none" }, "search_text": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Search Text", "description": "The optional search text that should be included. This should not be a filter mechanism but entries that are closer to the search text should be ranked higher" }, "semantic_search": { "type": "boolean", "title": "Semantic Search", "description": "Whether to perform semantic-based search, where agents semantically close to the search text rank highest. If not enabled, a keywords-based search is performed instead.", "default": false }, "offset": { "type": "integer", "title": "Offset", "description": "The offset of the search results for pagination", "default": 0 }, "limit": { "type": "integer", "title": "Limit", "description": "The limit of the search results for pagination", "default": 30 }, "exclude_geo_agents": { "type": "boolean", "title": "Exclude Geo Agents", "description": "Whether to exclude agents that have a geo location specified", "default": true }, "geo_filter": { "allOf": [ { "$ref": "#/components/schemas/AgentGeoFilter" } ], "description": "The geo filter that can be applied to the search" }, "include_geo_in_relevancy": { "type": "boolean", "title": "Include Geo In Relevancy", "description": "Whether the distance from the given coordinates should influence the ranking of the search results.", "default": false }, "search_id": { "type": "string", "format": "uuid4", "title": "Search Id", "description": "Search id of a previous search, will be generated if not passed.\n This id can the be passed as the search_id prop of another search when we want to do more searches with different offsets (= pagination)\n and we want all of them to be identified by the same search_id.\n The search_id then can be passed to the /click feedback endpoint if that agent was selected.\n If multiple searches are identified by this search_id and it is passed in the /click feedback endpoint payload when selecting an agent, agent selection events of different pages\n will be grouped under the same id which is useful information for agent search analytics." }, "source": { "type": "string", "title": "Source", "description": "The source where the request is sent from. Ideally should be one of the following: \n '', 'agentverse', 'flockx', an agent address but technically can also be a domain or any arbitrary string.", "default": "" } }, "additionalProperties": false, "type": "object", "required": [ "geo_filter" ], "title": "AgentGeoSearchRequest", "description": "The agent geo search request object" }, "AgentSearchRequest": { "properties": { "filters": { "allOf": [ { "$ref": "#/components/schemas/AgentFilters" } ], "default": { "state": [], "category": [], "agent_type": [], "protocol_digest": [], "has_location": false, "has_readme": false, "tags": [] } }, "sort": { "allOf": [ { "$ref": "#/components/schemas/SortType" } ], "description": "The type of sorting that should be applied to the search results", "default": "relevancy" }, "direction": { "allOf": [ { "$ref": "#/components/schemas/Direction" } ], "description": "The direction of the sorting, ascending or descending", "default": "desc" }, "cutoff": { "allOf": [ { "$ref": "#/components/schemas/RelevancyCutoff" } ], "description": "Controls how strictly the search results should be filtered based on their relevancy", "default": "none" }, "search_text": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Search Text", "description": "The optional search text that should be included. This should not be a filter mechanism but entries that are closer to the search text should be ranked higher" }, "semantic_search": { "type": "boolean", "title": "Semantic Search", "description": "Whether to perform semantic-based search, where agents semantically close to the search text rank highest. If not enabled, a keywords-based search is performed instead.", "default": false }, "offset": { "type": "integer", "title": "Offset", "description": "The offset of the search results for pagination", "default": 0 }, "limit": { "type": "integer", "title": "Limit", "description": "The limit of the search results for pagination", "default": 30 }, "exclude_geo_agents": { "type": "boolean", "title": "Exclude Geo Agents", "description": "Whether to exclude agents that have a geo location specified", "default": true }, "search_id": { "type": "string", "format": "uuid4", "title": "Search Id", "description": "Search id of a previous search, will be generated if not passed.\n This id can the be passed as the search_id prop of another search when we want to do more searches with different offsets (= pagination)\n and we want all of them to be identified by the same search_id.\n The search_id then can be passed to the /click feedback endpoint if that agent was selected.\n If multiple searches are identified by this search_id and it is passed in the /click feedback endpoint payload when selecting an agent, agent selection events of different pages\n will be grouped under the same id which is useful information for agent search analytics." }, "source": { "type": "string", "title": "Source", "description": "The source where the request is sent from. Ideally should be one of the following: \n '', 'agentverse', 'flockx', an agent address but technically can also be a domain or any arbitrary string.", "default": "" } }, "additionalProperties": false, "type": "object", "title": "AgentSearchRequest", "description": "The agent search request object" }, "AgentSearchResponse": { "properties": { "agents": { "items": { "$ref": "#/components/schemas/Agent" }, "type": "array", "title": "Agents", "description": "The list of agents that are returned as part of the search" }, "offset": { "type": "integer", "title": "Offset", "description": "The offset of the search results" }, "limit": { "type": "integer", "title": "Limit", "description": "The limit of the search results" }, "num_hits": { "type": "integer", "title": "Num Hits", "description": "The number of hits might be smaller than the total number of hits (`total`) when using offset and limit" }, "total": { "type": "integer", "title": "Total", "description": "The total number of hits might be bigger than the actual number of hits (`num_hits`)` when using offset and limit" }, "search_id": { "type": "string", "format": "uuid4", "title": "Search Id", "description": "Id passed to the search in the request payload / generated for the search (if not passed in the payload).\n This id can the be passed as the search_id prop of another search when we want to do more searches with different offsets (= pagination)\n and we want all of them to be identified by the same search_id.\n The search_id then can be passed to the /click feedback endpoint if that agent was selected.\n If multiple searches are identified by this search_id and it is passed in the /click feedback endpoint payload when selecting an agent, agent selection events of different pages\n will be grouped under the same id which is useful information for agent search analytics." } }, "type": "object", "required": [ "offset", "limit", "num_hits", "total", "search_id" ], "title": "AgentSearchResponse" }, "AgentType": { "type": "string", "enum": [ "hosted", "local", "mailbox", "proxy", "custom" ], "title": "AgentType" }, "Direction": { "type": "string", "enum": [ "asc", "desc" ], "title": "Direction" }, "HTTPValidationError": { "properties": { "detail": { "items": { "$ref": "#/components/schemas/ValidationError" }, "type": "array", "title": "Detail" } }, "type": "object", "title": "HTTPValidationError" }, "InteractionsThreshold": { "type": "string", "enum": [ "10", "100", "1k", "10k", "100k", "1m", "10m", "100m" ], "title": "InteractionsThreshold" }, "NetProtocol": { "type": "string", "enum": [ "agent", "test-agent" ], "title": "NetProtocol" }, "Protocol": { "properties": { "name": { "type": "string", "title": "Name", "description": "the name of the protocol" }, "version": { "type": "string", "title": "Version", "description": "the version of the protocol" }, "digest": { "type": "string", "title": "Digest", "description": "the digest of the protocol" } }, "type": "object", "required": [ "name", "version", "digest" ], "title": "Protocol" }, "RelevancyCutoff": { "type": "string", "enum": [ "none", "permissive", "balanced", "strict" ], "title": "RelevancyCutoff" }, "SearchFeedbackRequest": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "The address of the agent" }, "contract": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered", "default": "testnet" }, "search_id": { "type": "string", "format": "uuid4", "title": "Search Id", "description": "Search id generated before (during search) that identifies the search where the selected agent was retrieved." }, "page_index": { "type": "integer", "minimum": 0.0, "title": "Page Index", "description": "page index (should start from 0)" } }, "additionalProperties": false, "type": "object", "required": [ "address", "search_id", "page_index" ], "title": "SearchFeedbackRequest" }, "SortType": { "type": "string", "enum": [ "relevancy", "created-at", "last-modified", "interactions" ], "title": "SortType" }, "StatusType": { "type": "string", "enum": [ "active", "inactive" ], "title": "StatusType" }, "ValidationError": { "properties": { "loc": { "items": { "anyOf": [ { "type": "string" }, { "type": "integer" } ] }, "type": "array", "title": "Location" }, "msg": { "type": "string", "title": "Message" }, "type": { "type": "string", "title": "Error Type" } }, "type": "object", "required": [ "loc", "msg", "type" ], "title": "ValidationError" } } } }
