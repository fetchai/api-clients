{ "openapi": "3.0.0", "info": { "title": "FastAPI", "description": "An API for our smart search engine that provides the agent that best fits your needs.", "version": "0.1.0" }, "servers": [ { "url": "https://agentverse.ai" } ], "paths": { "/v1/search/agents": { "post": { "tags": [ "search", "public", "agents" ], "summary": "Search Agents", "description": "Search for agents.", "operationId": "search_agents", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSearchRequest" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSearchResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/agents/geo": { "post": { "tags": [ "search", "public", "agents" ], "summary": "Search Agent By Geolocation", "description": "Searches for agents by geolocation. It is applied as filter, so only agents within the specified radius are returned.\n\nIf in the payload `include_geo_in_relevancy` is set to `True`, the geo location of the agent is used in the relevancy score, in which case set a large enough radius!", "operationId": "search_agent_by_geolocation", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentGeoSearchRequest" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSearchResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/agents/similar/{address}": { "get": { "tags": [ "search", "public", "agents" ], "summary": "Search Agents By Similarity", "description": "Searches for agents similar to the agent given", "operationId": "search_agents_by_similarity", "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "description": "The address of the agent", "title": "Address" }, "description": "The address of the agent" }, { "name": "contract", "in": "query", "required": false, "schema": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered (testnet by default)", "default": "testnet", "title": "Contract" }, "description": "The Almanac contract where the agent is registered (testnet by default)" }, { "name": "limit", "in": "query", "required": false, "schema": { "type": "integer", "description": "The limit of search results to return (5 by default)", "default": 5, "title": "Limit" }, "description": "The limit of search results to return (5 by default)" } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentBySimilarityResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/agents/interactions/{address}": { "get": { "tags": [ "search", "public", "agents" ], "summary": "Get Interaction Counts Of Agent", "description": "Retrieves interaction count histories and all-time interaction counts of the agent", "operationId": "get_agent_interactions_count", "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "description": "The address of the agent", "title": "Address" }, "description": "The address of the agent" }, { "name": "contract", "in": "query", "required": false, "schema": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered (testnet by default)", "default": "testnet", "title": "Contract" }, "description": "The Almanac contract where the agent is registered (testnet by default)" } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentInteractionCountsResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/agents/click": { "post": { "tags": [ "search", "public", "agents" ], "summary": "Feedback", "operationId": "feedback", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SearchFeedbackRequest" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/agents/tags": { "get": { "tags": [ "search", "public", "agents" ], "summary": "Search Agent Tags", "operationId": "search_agent_tags", "parameters": [ { "name": "prefix", "in": "query", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "description": "The prefix to use for searching tags", "title": "Prefix" }, "description": "The prefix to use for searching tags" }, { "name": "limit", "in": "query", "required": false, "schema": { "type": "integer", "description": "The limit of search results to return (5 by default)", "default": 5, "title": "Limit" }, "description": "The limit of search results to return (5 by default)" } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentTagSearchResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/agents/seo": { "post": { "tags": [ "search", "public", "agents" ], "summary": "Start Seo Eval", "operationId": "start_seo_eval", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSEOEvaluationRequest" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSEOEvaluationResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } }, "security": [ { "FaunaAuthorizationScheme": [] } ] } }, "/v1/search/agents/interactions/asi1/recent/{address}": { "get": { "tags": [ "search", "public", "agents" ], "summary": "Get Recent Agent Asi1 Interactions", "description": "Returns recent ASI1 interaction details of an agent", "operationId": "get_recent_agent_interactions", "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "description": "The address of the agent", "title": "Address" }, "description": "The address of the agent" }, { "name": "contract", "in": "query", "required": false, "schema": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered (testnet by default)", "default": "testnet", "title": "Contract" }, "description": "The Almanac contract where the agent is registered (testnet by default)" } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/AgentAsi1InteractionDetailed" }, "title": "Response Get Recent Agent Interactions" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/functions": { "post": { "tags": [ "search", "public", "functions" ], "summary": "Search Functions", "operationId": "search_functions", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FunctionSearchRequest" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FunctionSearchResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/functions/interactions/{function_id}": { "get": { "tags": [ "search", "public", "functions" ], "summary": "Get Recent Interactions Of Function", "operationId": "get_function_interactions", "parameters": [ { "name": "function_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid4", "description": "Unique identifier of the function", "title": "Function Id" }, "description": "Unique identifier of the function" } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FunctionLast30daysInteractions" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/analytics/agents": { "post": { "tags": [ "search", "public", "analytics" ], "summary": "Get Agent Search Analytics", "operationId": "get_agent_searches_analytics", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSearchAnalyticsRequest" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSearchAnalyticsResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/analytics/agents/terms": { "post": { "tags": [ "search", "public", "analytics" ], "summary": "Get Agent Search Term Analytics", "description": "It provides data about the search terms that led to the agent in question (agent address in the payload).", "operationId": "get_agent_search_terms_analytics", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSearchTermAnalyticsRequest" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentSearchTermAnalyticsResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/search/analytics/summary": { "get": { "tags": [ "search", "public", "analytics" ], "summary": "Get Analytics Summary", "operationId": "get_analytics_summary", "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AnalyticsSummary" } } } } } } }, "/v1/search/analytics/insights/{address}": { "get": { "tags": [ "search", "public", "analytics" ], "summary": "Get Agent Insights", "description": "Returns various insights for the agent given, related to search and interactions", "operationId": "get_agent_insights", "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "description": "The address of the agent", "title": "Address" }, "description": "The address of the agent" }, { "name": "contract", "in": "query", "required": false, "schema": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered (testnet by default)", "default": "testnet", "title": "Contract" }, "description": "The Almanac contract where the agent is registered (testnet by default)" } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentInsightsResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } } }, "components": { "schemas": { "Agent": { "properties": { "address": { "type": "string", "title": "Address", "description": "the address of the agent (this should be used as the id of the agent)" }, "prefix": { "allOf": [ { "$ref": "#/components/schemas/NetProtocol" } ], "description": "In which net it is running (mainnet or test-net)" }, "name": { "type": "string", "title": "Name", "description": "the public name of the agent" }, "description": { "type": "string", "title": "Description", "description": "the short description of the agent" }, "readme": { "type": "string", "title": "Readme", "description": "the contents of the readme file" }, "protocols": { "items": { "$ref": "#/components/schemas/Protocol" }, "type": "array", "title": "Protocols", "description": "the list of protocols supported by the agent" }, "avatar_href": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Avatar Href", "description": "the href for the avatar image for the agent", "nullable": true }, "total_interactions": { "type": "integer", "title": "Total Interactions", "description": "the total interactions for this agent" }, "recent_interactions": { "type": "integer", "title": "Recent Interactions", "description": "the number of interactions in the last 90 days" }, "rating": { "anyOf": [ { "type": "number" }, { "type": "null" } ], "title": "Rating", "description": "agent rating a number between 0 and 5", "nullable": true }, "status": { "allOf": [ { "$ref": "#/components/schemas/StatusType" } ], "description": "the status if the agent" }, "type": { "allOf": [ { "$ref": "#/components/schemas/AgentType" } ], "description": "the type of agent" }, "featured": { "type": "boolean", "title": "Featured", "description": "signaled if the agent is featured or not", "default": false }, "category": { "allOf": [ { "$ref": "#/components/schemas/AgentCategory" } ], "description": "the creator of the agent" }, "system_wide_tags": { "items": { "type": "string" }, "type": "array", "title": "System Wide Tags", "description": "the system-wide tags assigned to the agent" }, "geo_location": { "anyOf": [ { "$ref": "#/components/schemas/AgentGeoLocation" }, { "type": "null" } ], "description": "the geolocation of the agent", "nullable": true }, "domain": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Domain", "description": "the domain of the agent", "nullable": true }, "metadata": { "anyOf": [ { "additionalProperties": { "anyOf": [ { "type": "string" }, { "items": { "type": "string" }, "type": "array" }, { "additionalProperties": { "type": "string" }, "type": "object" } ] }, "type": "object" }, { "type": "null" } ], "title": "Metadata", "description": "the registration attestation metadata associated with the agent", "nullable": true }, "last_updated": { "type": "string", "format": "date-time", "title": "Last Updated", "description": "the time at which the agent was last updated at" }, "created_at": { "type": "string", "format": "date-time", "title": "Created At", "description": "the time at which the agent was first visible or created" }, "recent_success_rate": { "anyOf": [ { "type": "number" }, { "type": "null" } ], "title": "Recent Success Rate", "description": "percentage of recent successful responses given by this agent when interacting with ASI1", "nullable": true }, "current_campaign_eligible": { "type": "boolean", "title": "Current Campaign Eligible", "default": false } }, "type": "object", "required": [ "address", "prefix", "name", "description", "readme", "protocols", "total_interactions", "recent_interactions", "status", "type", "category", "system_wide_tags", "last_updated", "created_at" ], "title": "Agent" }, "AgentAllTimeInteractionCounts": { "properties": { "interval": { "type": "integer", "minimum": 0.0, "title": "Interval", "description": "number of on_interval interactions" }, "message": { "type": "integer", "minimum": 0.0, "title": "Message", "description": "number of on_message interactions" }, "total": { "type": "integer", "minimum": 0.0, "title": "Total", "description": "the sum of on_interval and on_message interaction counts" } }, "type": "object", "required": [ "interval", "message", "total" ], "title": "AgentAllTimeInteractionCounts" }, "AgentAsi1InteractionDetailed": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "The address of the agent" }, "contract": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered", "default": "testnet" }, "status": { "allOf": [ { "$ref": "#/components/schemas/AgentEvalStatus" } ], "description": "Denotes the SEO evaluation status." }, "success": { "type": "boolean", "title": "Success", "description": "Denotes if agent execution by ASI1 was successful or not." }, "request": { "type": "string", "title": "Request", "description": "Message sent to the agent." }, "response": { "type": "string", "title": "Response", "description": "Response received from the agent." }, "from_verifier": { "type": "boolean", "title": "From Verifier", "description": "Denotes if the interaction came from the verifier agent. By default it's False - means it is an actual ASI1-agent interaction." }, "timestamp": { "type": "string", "title": "Timestamp" } }, "additionalProperties": false, "type": "object", "required": [ "address", "status", "success", "request", "response", "from_verifier", "timestamp" ], "title": "AgentAsi1InteractionDetailed" }, "AgentBySimilarityResponse": { "properties": { "agents": { "items": { "$ref": "#/components/schemas/Agent" }, "type": "array", "title": "Agents", "description": "The list of agents that are similar to the given one" } }, "type": "object", "title": "AgentBySimilarityResponse" }, "AgentCategory": { "type": "string", "enum": [ "fetch-ai", "community" ], "title": "AgentCategory" }, "AgentContract": { "type": "string", "enum": [ "mainnet", "testnet" ], "title": "AgentContract", "description": "Represents the Almanac contract where the agent is registered" }, "AgentEvalStatus": { "type": "string", "enum": [ "started", "message_dispatched", "response_received", "success", "failed" ], "title": "AgentEvalStatus" }, "AgentFilters": { "properties": { "state": { "items": { "$ref": "#/components/schemas/StatusType" }, "type": "array", "title": "State", "description": "The state of the agent, i.e. is it alive or not" }, "category": { "items": { "$ref": "#/components/schemas/AgentCategory" }, "type": "array", "title": "Category", "description": "The category of the creator of the agent" }, "agent_type": { "items": { "$ref": "#/components/schemas/AgentType" }, "type": "array", "title": "Agent Type", "description": "The category of how the agent is hosted" }, "protocol_digest": { "items": { "type": "string" }, "type": "array", "title": "Protocol Digest", "description": "The digest(s) of the protocol(s) that belong(s) to the agent" }, "has_location": { "type": "boolean", "title": "Has Location", "description": "If set to True, it will filter for agents that have a geo location specified", "default": false }, "has_readme": { "type": "boolean", "title": "Has Readme", "description": "If set to True, it will filter for agents that have a non-empty readme", "default": false }, "n_interactions": { "anyOf": [ { "$ref": "#/components/schemas/InteractionsThreshold" }, { "type": "null" } ], "description": "If specified, it will filter for agents that have a number of message_recent_interactions greater than the given threshold" }, "tags": { "items": { "type": "string" }, "type": "array", "title": "Tags", "description": "The tag(s) associated to the agent" } }, "additionalProperties": false, "type": "object", "title": "AgentFilters", "description": "The set of filters that should be applied to the agent search entries" }, "AgentGeoFilter": { "properties": { "latitude": { "type": "number", "maximum": 90.0, "minimum": -90.0, "title": "Latitude", "description": "The latitude of the location" }, "longitude": { "type": "number", "maximum": 180.0, "minimum": -180.0, "title": "Longitude", "description": "The longitude of the location" }, "radius": { "type": "number", "exclusiveMinimum": 0.0, "title": "Radius", "description": "The radius of the search in meters" } }, "additionalProperties": false, "type": "object", "required": [ "latitude", "longitude", "radius" ], "title": "AgentGeoFilter", "description": "The geo filter that can be applied to the agent search" }, "AgentGeoLocation": { "properties": { "latitude": { "type": "number", "title": "Latitude", "description": "the latitude of the agent" }, "longitude": { "type": "number", "title": "Longitude", "description": "the longitude of the agent" }, "radius": { "anyOf": [ { "type": "number" }, { "type": "null" } ], "title": "Radius", "description": "the radius in meters defining the area of effect of the agent" } }, "type": "object", "required": [ "latitude", "longitude" ], "title": "AgentGeoLocation" }, "AgentGeoSearchRequest": { "properties": { "filters": { "allOf": [ { "$ref": "#/components/schemas/AgentFilters" } ], "default": { "state": [], "category": [], "agent_type": [], "protocol_digest": [], "has_location": false, "has_readme": false, "tags": [] } }, "sort": { "allOf": [ { "$ref": "#/components/schemas/SortType" } ], "description": "The type of sorting that should be applied to the search results", "default": "relevancy" }, "direction": { "allOf": [ { "$ref": "#/components/schemas/Direction" } ], "description": "The direction of the sorting, ascending or descending", "default": "desc" }, "cutoff": { "allOf": [ { "$ref": "#/components/schemas/RelevancyCutoff" } ], "description": "Controls how strictly the search results should be filtered based on their relevancy", "default": "none" }, "search_text": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Search Text", "description": "The optional search text that should be included. This should not be a filter mechanism but entries that are closer to the search text should be ranked higher" }, "semantic_search": { "type": "boolean", "title": "Semantic Search", "description": "Whether to perform semantic-based search, where agents semantically close to the search text rank highest. If not enabled, a keywords-based search is performed instead.", "default": false }, "prioritise_asi1_agents": { "type": "boolean", "title": "Prioritise Asi1 Agents", "description": "Whether to prioritize those agents that have been executed successfully by ASI1 recently.", "default": false }, "offset": { "type": "integer", "title": "Offset", "description": "The offset of the search results for pagination", "default": 0 }, "limit": { "type": "integer", "title": "Limit", "description": "The limit of the search results for pagination", "default": 30 }, "exclude_geo_agents": { "type": "boolean", "title": "Exclude Geo Agents", "description": "Whether to exclude agents that have a geo location specified", "default": true }, "geo_filter": { "allOf": [ { "$ref": "#/components/schemas/AgentGeoFilter" } ], "description": "The geo filter that can be applied to the search" }, "include_geo_in_relevancy": { "type": "boolean", "title": "Include Geo In Relevancy", "description": "Whether the distance from the given coordinates should influence the ranking of the search results.", "default": false }, "search_id": { "type": "string", "format": "uuid4", "title": "Search Id", "description": "Unique identifier of the search in question (search id generated before (previous search))." }, "source": { "type": "string", "title": "Source", "description": "The source where the request is sent from. Ideally should be one of the following: '', 'agentverse', 'flockx', an agent address", "default": "" } }, "additionalProperties": false, "type": "object", "required": [ "geo_filter" ], "title": "AgentGeoSearchRequest", "description": "The agent geo search request object" }, "AgentInsightsResponse": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "The address of the agent" }, "contract": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered", "default": "testnet" }, "asi1_total_interactions": { "type": "integer", "title": "Asi1 Total Interactions", "description": "The total number of interactions with ASI:One." }, "asi1_total_success_interactions": { "type": "integer", "title": "Asi1 Total Success Interactions", "description": "The total number of interactions with ASI:One that were deemed successful." }, "asi1_recent_interactions": { "type": "integer", "title": "Asi1 Recent Interactions", "description": "The number of interactions with ASI:One in the last 30 days." }, "asi1_recent_success_interactions": { "type": "integer", "title": "Asi1 Recent Success Interactions", "description": "The number of interactions with ASI:One in the last 30 days that were deemed successful." }, "verifier_total_interactions": { "type": "integer", "title": "Verifier Total Interactions", "description": "The total number of interactions with the verifier agent." }, "verifier_total_success_interactions": { "type": "integer", "title": "Verifier Total Success Interactions", "description": "The total number of interactions with the verifier agent that were deemed successful." }, "verifier_recent_interactions": { "type": "integer", "title": "Verifier Recent Interactions", "description": "The number of interactions with the verifier agent in the last 30 days." }, "verifier_recent_success_interactions": { "type": "integer", "title": "Verifier Recent Success Interactions", "description": "The number of interactions with the verifier agent in the last 30 days that were deemed successful." }, "readme_uniqueness_score": { "anyOf": [ { "type": "number", "maximum": 1.0, "minimum": 0.0 }, { "type": "null" } ], "title": "Readme Uniqueness Score", "description": "A score from 0 to 1, indicating how unique this agent's readme is compared to other agents'. A value close to 0 means that this readme is identical (or very close) to other readmes; a value closer to 1 means that this readme is substantially distinct and unique. If not defined, it means that the readme is empty or too short." }, "readme_quality_score": { "anyOf": [ { "type": "number", "maximum": 1.0, "minimum": 0.0 }, { "type": "null" } ], "title": "Readme Quality Score", "description": "A score from 0 to 1, giving a measure of the quality of the readme (and the agent). A value close to 0 means that this readme is too vague, brief, and/or unclear; a value closer to 1 means that this readme is clear, informative and well structured. If not defined, it means that the readme is empty or too short." }, "interactions_score": { "anyOf": [ { "type": "number", "maximum": 1.0, "minimum": 0.0 }, { "type": "null" } ], "title": "Interactions Score", "description": "A score from 0 to 1, indicating how well connected the agent is with other agents in the network. A value close to 0 means that this agent doesn't meaningfully interact (or very minimally) with other agents; a value closer to 1 means that this agent is important in the network, and interacts with several other agents. If not defined, it means that the agent is probably too new and an interaction score for it hasn't been computed yet." }, "rating": { "type": "number", "maximum": 5.0, "minimum": 0.0, "title": "Rating", "description": "A score from 0 to 5, representing the rating of the agent. It takes different factors into account." } }, "additionalProperties": false, "type": "object", "required": [ "address", "asi1_total_interactions", "asi1_total_success_interactions", "asi1_recent_interactions", "asi1_recent_success_interactions", "verifier_total_interactions", "verifier_total_success_interactions", "verifier_recent_interactions", "verifier_recent_success_interactions", "rating" ], "title": "AgentInsightsResponse" }, "AgentInteractionCountsResponse": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "The address of the agent" }, "contract": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered", "default": "testnet" }, "interval": { "items": { "type": "integer" }, "type": "array", "maxItems": 30, "minItems": 30, "title": "Interval", "description": "the number of on_interval interactions for each day" }, "message": { "items": { "type": "integer" }, "type": "array", "maxItems": 30, "minItems": 30, "title": "Message", "description": "the number of on_message interactions for each day" }, "total": { "items": { "type": "integer" }, "type": "array", "maxItems": 30, "minItems": 30, "title": "Total", "description": "the sum of on_interval and on_message interaction counts for each day" }, "num_all_time_interactions": { "allOf": [ { "$ref": "#/components/schemas/AgentAllTimeInteractionCounts" } ], "description": "number of on_interval, on_message and total (sum of on_interval and on_message) interactions" } }, "additionalProperties": false, "type": "object", "required": [ "address", "interval", "message", "total", "num_all_time_interactions" ], "title": "AgentInteractionCountsResponse" }, "AgentSEOEvaluationRequest": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "The address of the agent" }, "contract": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered", "default": "testnet" }, "num_messages": { "type": "integer", "title": "Num Messages", "description": "How many messages to send to the agent (default: 1)", "default": 1 } }, "additionalProperties": false, "type": "object", "required": [ "address" ], "title": "AgentSEOEvaluationRequest" }, "AgentSEOEvaluationResponse": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "The address of the agent" }, "contract": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered", "default": "testnet" }, "eval_id": { "type": "string", "format": "uuid", "title": "Eval Id", "description": "Id generated for the current SEO evaluation run" } }, "additionalProperties": false, "type": "object", "required": [ "address", "eval_id" ], "title": "AgentSEOEvaluationResponse" }, "AgentSearchAnalyticsRequest": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "The address of the agent" }, "contract": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered", "default": "testnet" } }, "additionalProperties": false, "type": "object", "required": [ "address" ], "title": "AgentSearchAnalyticsRequest", "description": "The agent search analytics request object" }, "AgentSearchAnalyticsResponse": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "The address of the agent" }, "contract": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered", "default": "testnet" }, "num_searches": { "type": "integer", "title": "Num Searches", "description": "Total number of searches when this agent was retrieved" }, "last_24h_num_searches": { "type": "integer", "title": "Last 24H Num Searches", "description": "Number of searches in the last 24 hours when this agent was retrieved" }, "last_30d_num_searches": { "type": "integer", "title": "Last 30D Num Searches", "description": "Number of searches in the last 30 days when this agent was retrieved" }, "last_30d_history": { "items": { "type": "integer" }, "type": "array", "maxItems": 30, "minItems": 30, "title": "Last 30D History", "description": "Number of searches per day in the last 30 days when this agent was retrieved" } }, "additionalProperties": false, "type": "object", "required": [ "address", "num_searches", "last_24h_num_searches", "last_30d_num_searches", "last_30d_history" ], "title": "AgentSearchAnalyticsResponse", "description": "The agent search analytics response object" }, "AgentSearchRequest": { "properties": { "filters": { "allOf": [ { "$ref": "#/components/schemas/AgentFilters" } ], "default": { "state": [], "category": [], "agent_type": [], "protocol_digest": [], "has_location": false, "has_readme": false, "tags": [] } }, "sort": { "allOf": [ { "$ref": "#/components/schemas/SortType" } ], "description": "The type of sorting that should be applied to the search results", "default": "relevancy" }, "direction": { "allOf": [ { "$ref": "#/components/schemas/Direction" } ], "description": "The direction of the sorting, ascending or descending", "default": "desc" }, "cutoff": { "allOf": [ { "$ref": "#/components/schemas/RelevancyCutoff" } ], "description": "Controls how strictly the search results should be filtered based on their relevancy", "default": "none" }, "search_text": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Search Text", "description": "The optional search text that should be included. This should not be a filter mechanism but entries that are closer to the search text should be ranked higher" }, "semantic_search": { "type": "boolean", "title": "Semantic Search", "description": "Whether to perform semantic-based search, where agents semantically close to the search text rank highest. If not enabled, a keywords-based search is performed instead.", "default": false }, "prioritise_asi1_agents": { "type": "boolean", "title": "Prioritise Asi1 Agents", "description": "Whether to prioritize those agents that have been executed successfully by ASI1 recently.", "default": false }, "offset": { "type": "integer", "title": "Offset", "description": "The offset of the search results for pagination", "default": 0 }, "limit": { "type": "integer", "title": "Limit", "description": "The limit of the search results for pagination", "default": 30 }, "exclude_geo_agents": { "type": "boolean", "title": "Exclude Geo Agents", "description": "Whether to exclude agents that have a geo location specified", "default": true }, "search_id": { "type": "string", "format": "uuid4", "title": "Search Id", "description": "Unique identifier of the search in question (search id generated before (previous search))." }, "source": { "type": "string", "title": "Source", "description": "The source where the request is sent from. Ideally should be one of the following: '', 'agentverse', 'flockx', an agent address", "default": "" }, "only_current_campaign_eligible": { "type": "boolean", "title": "Only Current Campaign Eligible", "description": "If True, only agents eligible for current campaign are shown", "default": false } }, "additionalProperties": false, "type": "object", "title": "AgentSearchRequest", "description": "The agent search request object" }, "AgentSearchResponse": { "properties": { "agents": { "items": { "$ref": "#/components/schemas/Agent" }, "type": "array", "title": "Agents", "description": "The list of agents that are returned as part of the search" }, "offset": { "type": "integer", "title": "Offset", "description": "The offset of the search results" }, "limit": { "type": "integer", "title": "Limit", "description": "The limit of the search results" }, "num_hits": { "type": "integer", "title": "Num Hits", "description": "The number of hits might be smaller than the total number of hits (`total`) when using offset and limit" }, "total": { "type": "integer", "title": "Total", "description": "The total number of hits might be bigger than the actual number of hits (`num_hits`)` when using offset and limit" }, "search_id": { "type": "string", "format": "uuid4", "title": "Search Id", "description": "search id passed to the search in the request / generated for the search" } }, "type": "object", "required": [ "offset", "limit", "num_hits", "total", "search_id" ], "title": "AgentSearchResponse" }, "AgentSearchTermAnalyticsRequest": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "The address of the agent" }, "contract": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered", "default": "testnet" }, "top": { "type": "integer", "maximum": 100.0, "title": "Top", "description": "How many of the top mostly used search terms we want to retrieve analytics for", "default": 10 } }, "additionalProperties": false, "type": "object", "required": [ "address" ], "title": "AgentSearchTermAnalyticsRequest", "description": "The agent search term analytics request object" }, "AgentSearchTermAnalyticsResponse": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "The address of the agent" }, "contract": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered", "default": "testnet" }, "term_percentages": { "items": { "$ref": "#/components/schemas/SearchTermPercentage" }, "type": "array", "title": "Term Percentages", "description": "Percentage of searches with different terms when this agent was retrieved" } }, "additionalProperties": false, "type": "object", "required": [ "address", "term_percentages" ], "title": "AgentSearchTermAnalyticsResponse", "description": "The agent search term analytics response object" }, "AgentTag": { "properties": { "tag": { "type": "string", "title": "Tag", "description": "The tag of the agent (e.g.: llm, geo, travel, utility, finance, ...)" } }, "type": "object", "required": [ "tag" ], "title": "AgentTag" }, "AgentTagSearchResponse": { "properties": { "tags": { "items": { "$ref": "#/components/schemas/AgentTag" }, "type": "array", "title": "Tags", "description": "The list of tags that are returned as part of the search" } }, "type": "object", "title": "AgentTagSearchResponse" }, "AgentType": { "type": "string", "enum": [ "hosted", "local", "mailbox", "proxy", "custom" ], "title": "AgentType" }, "AnalyticsSummary": { "properties": { "active_agents": { "$ref": "#/components/schemas/TrendyData" }, "agents_interactions_all_time": { "$ref": "#/components/schemas/TrendyData" } }, "type": "object", "required": [ "active_agents", "agents_interactions_all_time" ], "title": "AnalyticsSummary" }, "Direction": { "type": "string", "enum": [ "asc", "desc" ], "title": "Direction" }, "Function": { "properties": { "id": { "type": "string", "format": "uuid4", "title": "Id", "description": "the identifier of the function" }, "type": { "allOf": [ { "$ref": "#/components/schemas/FunctionType" } ], "description": "the type of the function / action" }, "name": { "type": "string", "title": "Name", "description": "the name of the function" }, "agent": { "type": "string", "title": "Agent", "description": "the agent that the function belongs to" }, "description": { "type": "string", "title": "Description", "description": "the description of the function" }, "is_primary": { "type": "boolean", "title": "Is Primary", "description": "denotes if a function is primary or not" }, "groups": { "items": { "type": "string" }, "type": "array", "title": "Groups", "description": "group that the function belongs to" }, "total_interactions": { "type": "integer", "title": "Total Interactions", "description": "the total interactions for this function" }, "recent_interactions": { "type": "integer", "title": "Recent Interactions", "description": "the number of interactions in the last 90 days" }, "rating": { "anyOf": [ { "type": "number" }, { "type": "null" } ], "title": "Rating", "description": "agent rating a number between 0 and 5" }, "featured": { "type": "boolean", "title": "Featured", "description": "signaled if the function is featured or not", "default": false }, "last_updated": { "type": "string", "format": "date-time", "title": "Last Updated", "description": "the time at which the function was last updated at" }, "created_at": { "type": "string", "format": "date-time", "title": "Created At", "description": "the time at which the function was first visible or created" } }, "type": "object", "required": [ "id", "type", "name", "agent", "description", "is_primary", "total_interactions", "recent_interactions", "last_updated", "created_at" ], "title": "Function" }, "FunctionFilters": { "properties": { "function_type": { "items": { "$ref": "#/components/schemas/FunctionType" }, "type": "array", "title": "Function Type", "description": "The type of the function to search for" } }, "additionalProperties": false, "type": "object", "title": "FunctionFilters" }, "FunctionLast30daysInteractions": { "properties": { "function_id": { "type": "string", "format": "uuid4", "title": "Function Id", "description": "Unique identifier of the function" }, "total": { "items": { "type": "integer" }, "type": "array", "title": "Total", "description": "the total number of interactions for each day" } }, "type": "object", "required": [ "function_id", "total" ], "title": "FunctionLast30daysInteractions", "description": "The function last 30 days interactions response object" }, "FunctionSearchRequest": { "properties": { "filters": { "allOf": [ { "$ref": "#/components/schemas/FunctionFilters" } ], "default": { "function_type": [] } }, "sort": { "allOf": [ { "$ref": "#/components/schemas/SortType" } ], "description": "The type of sorting that should be applied to the search results, relevancy is the default and should be", "default": "relevancy" }, "direction": { "allOf": [ { "$ref": "#/components/schemas/Direction" } ], "description": "The direction of the sorting, ascending or descending", "default": "asc" }, "search_text": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Search Text", "description": "The optional search text that should be included. This should not be a filter mechanism but entries that are closer to the search text should be ranked higher." }, "offset": { "type": "integer", "title": "Offset", "description": "The offset of the search results for pagination", "default": 0 }, "limit": { "type": "integer", "title": "Limit", "description": "The limit of the search results for pagination", "default": 30 } }, "additionalProperties": false, "type": "object", "title": "FunctionSearchRequest", "description": "The function search request object" }, "FunctionSearchResponse": { "properties": { "functions": { "items": { "$ref": "#/components/schemas/Function" }, "type": "array", "title": "Functions", "description": "The list of functions that match the search criteria" }, "offset": { "type": "integer", "title": "Offset", "description": "The offset of the first function in the search results for pagination" }, "limit": { "type": "integer", "title": "Limit", "description": "The limit of the search results for pagination" }, "num_hits": { "type": "integer", "title": "Num Hits", "description": "The number of hits might be smaller than the total number of hits (`total`) when using offset and limit" }, "total": { "type": "integer", "title": "Total", "description": "The total number of hits might be bigger than the actual number of hits (`num_hits`) when using offset and limit" } }, "type": "object", "required": [ "offset", "limit", "num_hits", "total" ], "title": "FunctionSearchResponse", "description": "The function search response object" }, "FunctionType": { "type": "string", "enum": [ "function", "dialogue", "workflow" ], "title": "FunctionType" }, "HTTPValidationError": { "properties": { "detail": { "items": { "$ref": "#/components/schemas/ValidationError" }, "type": "array", "title": "Detail" } }, "type": "object", "title": "HTTPValidationError" }, "InteractionsThreshold": { "type": "string", "enum": [ "10", "100", "1k", "10k", "100k", "1m", "10m", "100m" ], "title": "InteractionsThreshold" }, "NetProtocol": { "type": "string", "enum": [ "agent", "test-agent" ], "title": "NetProtocol" }, "Protocol": { "properties": { "name": { "type": "string", "title": "Name", "description": "the name of the protocol" }, "version": { "type": "string", "title": "Version", "description": "the version of the protocol" }, "digest": { "type": "string", "title": "Digest", "description": "the digest of the protocol" } }, "type": "object", "required": [ "name", "version", "digest" ], "title": "Protocol" }, "RelevancyCutoff": { "type": "string", "enum": [ "none", "permissive", "balanced", "strict" ], "title": "RelevancyCutoff" }, "SearchFeedbackRequest": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "The address of the agent" }, "contract": { "allOf": [ { "$ref": "#/components/schemas/AgentContract" } ], "description": "The Almanac contract where the agent is registered", "default": "testnet" }, "search_id": { "type": "string", "format": "uuid4", "title": "Search Id", "description": "search id generated before (during search)" }, "page_index": { "type": "integer", "minimum": 0.0, "title": "Page Index", "description": "page index (should start from 0)" } }, "additionalProperties": false, "type": "object", "required": [ "address", "search_id", "page_index" ], "title": "SearchFeedbackRequest" }, "SearchTermPercentage": { "properties": { "term": { "type": "string", "title": "Term", "description": "Search term that was used when the agent was retrieved" }, "last_24h_percentage": { "type": "number", "maximum": 100.0, "minimum": 0.0, "title": "Last 24H Percentage", "description": "Percentage of searches in last 24h when the agent was retrieved using this search term" }, "last_7d_percentage": { "type": "number", "maximum": 100.0, "minimum": 0.0, "title": "Last 7D Percentage", "description": "Percentage of searches in last 7 days when the agent was retrieved using this search term" }, "last_30d_percentage": { "type": "number", "maximum": 100.0, "minimum": 0.0, "title": "Last 30D Percentage", "description": "Percentage of searches in last 30 days when the agent was retrieved using this search term" } }, "type": "object", "required": [ "term", "last_24h_percentage", "last_7d_percentage", "last_30d_percentage" ], "title": "SearchTermPercentage", "description": "Percentage of searches when the agent was retrieved using this search term" }, "SortType": { "type": "string", "enum": [ "relevancy", "created-at", "last-modified", "interactions" ], "title": "SortType" }, "StatusType": { "type": "string", "enum": [ "active", "inactive" ], "title": "StatusType" }, "TrendyData": { "properties": { "value": { "type": "integer", "title": "Value" }, "trend": { "anyOf": [ { "type": "integer" }, { "type": "null" } ], "title": "Trend" } }, "type": "object", "required": [ "value", "trend" ], "title": "TrendyData" }, "ValidationError": { "properties": { "loc": { "items": { "anyOf": [ { "type": "string" }, { "type": "integer" } ] }, "type": "array", "title": "Location" }, "msg": { "type": "string", "title": "Message" }, "type": { "type": "string", "title": "Error Type" } }, "type": "object", "required": [ "loc", "msg", "type" ], "title": "ValidationError" } }, "securitySchemes": { "FaunaAuthorizationScheme": { "type": "oauth2", "flows": { "authorizationCode": { "scopes": {}, "authorizationUrl": "", "tokenUrl": "token" } } } } } }
