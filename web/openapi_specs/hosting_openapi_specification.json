{ "openapi": "3.0.0", "info": { "title": "Agent Hosting API", "description": "\n\n## Overview\n\nThe Agent Hosting API helps users deploy agents to the cloud\n\n## Authentication\n\nThe entire API requires that the user authenticate with the ecosystem first before accessing the api\n", "version": "0.1.0" }, "servers": [ { "url": "https://agentverse.ai" } ], "paths": { "/v1/hosting/agents": { "get": { "tags": [ "hosting" ], "summary": "Get User Agents", "operationId": "list_user_agents", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "cursor", "in": "query", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Cursor" } }, { "name": "name", "in": "query", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Name" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } }, { "name": "sort_by", "in": "query", "required": false, "schema": { "anyOf": [ { "type": "string", "pattern": "^(-?)(modified|created|name)$" }, { "type": "null" } ], "title": "Sort By" } }, { "name": "direction", "in": "query", "required": false, "schema": { "type": "string", "pattern": "^(asc|desc)$", "default": "asc", "title": "Direction" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WithPagination_AgentSummary_" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "post": { "tags": [ "hosting" ], "summary": "Create New User Agent", "operationId": "create_user_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NewAgent" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents": { "get": { "tags": [ "hosting" ], "summary": "Get Team Agents", "operationId": "list_team_agents", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "cursor", "in": "query", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Cursor" } }, { "name": "name", "in": "query", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Name" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } }, { "name": "sort_by", "in": "query", "required": false, "schema": { "anyOf": [ { "type": "string", "pattern": "^(-?)(modified|created|name)$" }, { "type": "null" } ], "title": "Sort By" } }, { "name": "direction", "in": "query", "required": false, "schema": { "type": "string", "pattern": "^(asc|desc)$", "default": "asc", "title": "Direction" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WithPagination_AgentSummary_" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "post": { "tags": [ "hosting" ], "summary": "Create New Team Agent", "operationId": "create_team_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NewAgent" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/profile": { "get": { "tags": [ "hosting" ], "summary": "Get User Agent Public Profile", "operationId": "get_user_agent_profile", "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "anyOf": [ { "$ref": "#/components/schemas/PublicAgent" }, { "type": "null" } ], "title": "Response Get User Agent Profile" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/profile": { "get": { "tags": [ "hosting" ], "summary": "Get Team Agent Public Profile", "operationId": "get_team_agent_profile", "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "anyOf": [ { "$ref": "#/components/schemas/PublicAgent" }, { "type": "null" } ], "title": "Response Get Team Agent Profile" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}": { "get": { "tags": [ "hosting" ], "summary": "Get Specific User Agent", "description": "Looks up a specific agent by address on the hosting platform", "operationId": "get_user_agent_details", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "put": { "tags": [ "hosting" ], "summary": "Update Specific User Agent", "description": "Updates a specific agent, by address from the platform", "operationId": "update_user_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAgent" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "delete": { "tags": [ "hosting" ], "summary": "Delete Specific User Agent", "description": "Deletes a specific agent, by address from the platform", "operationId": "delete_user_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}": { "get": { "tags": [ "hosting" ], "summary": "Get Specific Teams Agent", "description": "Looks up a specific agent by address on the hosting platform", "operationId": "get_team_agent_details", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "put": { "tags": [ "hosting" ], "summary": "Update Specific Team Agent", "description": "Updates a specific agent, by address from the platform", "operationId": "update_team_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAgent" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "delete": { "tags": [ "hosting" ], "summary": "Delete Specific Team Agent", "description": "Deletes a specific agent, by address from the platform", "operationId": "delete_team_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/duplicate": { "post": { "tags": [ "hosting" ], "summary": "Duplicate Specific User Agent", "operationId": "duplicate_user_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NewAgent" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/duplicate": { "post": { "tags": [ "hosting" ], "summary": "Duplicate Specific Team Agent", "operationId": "duplicate_team_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NewAgent" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/interactions": { "get": { "tags": [ "hosting" ], "summary": "Get Agent User Interactions", "operationId": "get_user_agent_interactions", "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "period", "in": "query", "required": false, "schema": { "$ref": "#/components/schemas/InteractionPeriod", "default": "NinetyDays" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HistoricalInteractions" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/interactions": { "get": { "tags": [ "hosting" ], "summary": "Get Agent Team Interactions", "operationId": "get_team_agent_interactions", "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "period", "in": "query", "required": false, "schema": { "$ref": "#/components/schemas/InteractionPeriod", "default": "NinetyDays" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HistoricalInteractions" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/code": { "get": { "tags": [ "hosting" ], "summary": "Get User Agent Code", "description": "Gets the current code for an agent, specified by address", "operationId": "get_user_agent_code", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentCode" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "put": { "tags": [ "hosting" ], "summary": "Update User Agent Code", "description": "Updates the code for a specific agent, identified by address", "operationId": "update_user_agent_code", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAgentCode" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentCodeDigest" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/code": { "get": { "tags": [ "hosting" ], "summary": "Get Team Agent Code", "description": "Gets the current code for an agent, specified by address", "operationId": "get_team_agent_code", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentCode" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "put": { "tags": [ "hosting" ], "summary": "Update Team Agent Code", "description": "Updates the code for a specific agent, identified by address", "operationId": "update_team_agent_code", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAgentCode" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentCodeDigest" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/storage": { "get": { "tags": [ "hosting" ], "summary": "Get User Agent Storage", "description": "Gets the storage for an agent, specified by address", "operationId": "get_user_agent_storage", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "cursor", "in": "query", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Cursor" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WithPagination_StorageItem_" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/storage": { "get": { "tags": [ "hosting" ], "summary": "Get Team Agent Storage", "description": "Gets the storage for an agent, specified by address", "operationId": "get_team_agent_storage", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "cursor", "in": "query", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Cursor" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/WithPagination_StorageItem_" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/storage/{key}": { "get": { "tags": [ "hosting" ], "summary": "Get User Agent Storage By Key", "operationId": "get_user_agent_storage_by_key", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "key", "in": "path", "required": true, "schema": { "type": "string", "title": "Key" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StorageItem" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "put": { "tags": [ "hosting" ], "summary": "Update User Agent Storage", "description": "Updates the storage for a specific agent, identified by address", "operationId": "update_user_agent_storage", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "key", "in": "path", "required": true, "schema": { "type": "string", "title": "Key" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StorageItemUpdate" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "delete": { "tags": [ "hosting" ], "summary": "Delete User Agent Storage", "description": "Updates the storage for a specific agent, identified by address", "operationId": "delete_user_agent_storage", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "key", "in": "path", "required": true, "schema": { "type": "string", "title": "Key" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/storage/{key}": { "get": { "tags": [ "hosting" ], "summary": "Get Team Agent Storage By Key", "operationId": "get_team_agent_storage_by_key", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "key", "in": "path", "required": true, "schema": { "type": "string", "title": "Key" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StorageItem" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "put": { "tags": [ "hosting" ], "summary": "Update Team Agent Storage", "description": "Updates the storage for a specific agent, identified by address", "operationId": "update_team_agent_storage", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "key", "in": "path", "required": true, "schema": { "type": "string", "title": "Key" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StorageItemUpdate" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "delete": { "tags": [ "hosting" ], "summary": "Delete Team Agent Storage", "description": "Updates the storage for a specific agent, identified by address", "operationId": "delete_team_agent_storage", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "key", "in": "path", "required": true, "schema": { "type": "string", "title": "Key" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/start": { "post": { "tags": [ "hosting" ], "summary": "Start Specific User Agent", "description": "Starts a specific agent, identified by address", "operationId": "start_specific_user_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/start": { "post": { "tags": [ "hosting" ], "summary": "Start Specific Team Agent", "description": "Starts a specific agent, identified by address", "operationId": "start_specific_team_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/stop": { "post": { "tags": [ "hosting" ], "summary": "Stop Specific User Agent", "description": "Stops a specific agent, identified by address", "operationId": "stop_specific_user_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/stop": { "post": { "tags": [ "hosting" ], "summary": "Stop Specific Team Agent", "description": "Stops a specific agent, identified by address", "operationId": "stop_specific_team_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/logs/latest": { "get": { "tags": [ "hosting" ], "summary": "Get Latest Logs For User Agent", "description": "Gets the latest logs for a specific agent, identified by address", "operationId": "get_latest_logs_for_user_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/AgentLog" }, "title": "Response Get Latest Logs For User Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/logs/latest": { "get": { "tags": [ "hosting" ], "summary": "Get Latest Logs For Team Agent", "description": "Gets the latest logs for a specific agent, identified by address", "operationId": "get_latest_logs_for_team_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "type": "array", "items": { "$ref": "#/components/schemas/AgentLog" }, "title": "Response Get Latest Logs For Team Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/logs": { "delete": { "tags": [ "hosting" ], "summary": "Delete Logs For User Agent", "description": "Deletes all the logs for a specific agent, identified by address", "operationId": "delete_logs_for_user_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/logs": { "delete": { "tags": [ "hosting" ], "summary": "Delete Logs For Team Agent", "description": "Deletes all the logs for a specific agent, identified by address", "operationId": "delete_logs_for_team_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/domains/register": { "post": { "tags": [ "hosting" ], "summary": "Register New User Domain Name", "description": "Register agent name on name service contract", "operationId": "register_new_user_domain_name", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NewDomainName" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/domains/register": { "post": { "tags": [ "hosting" ], "summary": "Register New Team Domain Name", "description": "Register agent name on name service contract", "operationId": "register_new_team_domain_name", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NewDomainName" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/agents/{address}/network": { "put": { "tags": [ "hosting" ], "summary": "Update User Agent Network", "operationId": "update_user_agent_network", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAgentNetwork" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/agents/{address}/network": { "put": { "tags": [ "hosting" ], "summary": "Update Team Agent Network", "operationId": "update_team_agent_network", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateAgentNetwork" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/secrets": { "get": { "tags": [ "hosting" ], "summary": "Get User Secret", "description": "Returns all secrets for the given user.", "operationId": "get_user_secrets", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SecretList" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "post": { "tags": [ "hosting" ], "summary": "Create User Secret", "description": "Creates a new secret for the given agent.", "operationId": "create_user_agent_secret", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SecretCreate" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Secret" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/secrets": { "get": { "tags": [ "hosting" ], "summary": "Get Team Secret", "description": "Returns all secrets for the given team.", "operationId": "get_team_secret", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SecretList" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "post": { "tags": [ "hosting" ], "summary": "Create Team Secret", "description": "Creates a new secret for the given agent.", "operationId": "create_team_agent_secret", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SecretCreate" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Secret" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/{address}/secrets": { "get": { "tags": [ "hosting" ], "summary": "Get User Agent Secrets", "description": "Returns all secrets for the given agent address.", "operationId": "get_user_agent_secrets", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SecretList" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/{address}/secrets": { "get": { "tags": [ "hosting" ], "summary": "Get Team Agent Secrets", "description": "Returns all secrets for the given agent address.", "operationId": "get_team_agent_secrets", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/SecretList" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/secrets/{address}/{name}": { "delete": { "tags": [ "hosting" ], "summary": "Delete User Secret", "description": "Deletes a secret for the given address and name.", "operationId": "delete_user_secret", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "name", "in": "path", "required": true, "schema": { "type": "string", "title": "Name" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/teams/{slug}/secrets/{address}/{name}": { "delete": { "tags": [ "hosting" ], "summary": "Delete Team Secret", "description": "Deletes a secret for the given address and name.", "operationId": "delete_team_secret", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } }, { "name": "name", "in": "path", "required": true, "schema": { "type": "string", "title": "Name" } }, { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/hosting/submit": { "post": { "tags": [ "hosting" ], "summary": "Submit Message Envelope", "operationId": "submit_message_envelope", "parameters": [ { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Envelope" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "anyOf": [ { "$ref": "#/components/schemas/Envelope" }, { "$ref": "#/components/schemas/Empty" } ], "title": "Response Submit Message Envelope" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "head": { "tags": [ "hosting" ], "summary": "Agent Readiness Probe", "operationId": "agent_readiness_probe", "parameters": [ { "name": "no_cache", "in": "query", "required": false, "schema": { "type": "boolean", "default": false, "title": "No Cache" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": {} } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } } }, "components": { "schemas": { "Agent": { "properties": { "name": { "type": "string", "title": "Name", "description": "Name of the agent." }, "address": { "type": "string", "title": "Address", "description": "Bech32 address of the agent." }, "domain": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Domain", "description": "Domain name associated with the agent." }, "prefix": { "anyOf": [ { "type": "string", "enum": [ "agent", "test-agent" ] }, { "type": "null" } ], "title": "Prefix", "description": "Address prefix of the agent.", "default": "test-agent" }, "running": { "type": "boolean", "title": "Running", "description": "Whether the agent is currently running." }, "compiled": { "anyOf": [ { "type": "boolean" }, { "type": "null" } ], "title": "Compiled", "description": "Whether the agent code has been compiled." }, "code_digest": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Code Digest", "description": "Digest of the agent's code." }, "wallet_address": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Wallet Address", "description": "Wallet address of the agent." }, "code_update_timestamp": { "anyOf": [ { "type": "string", "format": "date-time" }, { "type": "null" } ], "title": "Code Update Timestamp", "description": "Last time the code was updated." }, "creation_timestamp": { "anyOf": [ { "type": "string", "format": "date-time" }, { "type": "null" } ], "title": "Creation Timestamp", "description": "Time when the agent was created." }, "avatar_url": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Avatar Url", "description": "URL to the agent's avatar image." }, "maintainer_id": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Maintainer Id", "description": "ID of the user maintaining the agent." }, "revision": { "type": "integer", "title": "Revision", "description": "Revision number of the agent." }, "readme": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Readme", "description": "README description of the agent." }, "short_description": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Short Description", "description": "Short description for display." }, "metadata": { "anyOf": [ { "$ref": "#/components/schemas/AgentMetadata" }, { "type": "null" } ], "description": "Metadata associated with the agent." }, "total_interactions": { "anyOf": [ { "type": "integer" }, { "type": "null" } ], "title": "Total Interactions", "description": "Total number of interactions recorded for the agent." } }, "type": "object", "required": [ "name", "address", "running", "revision" ], "title": "Agent" }, "AgentCode": { "properties": { "digest": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Digest", "description": "SHA256 digest representing the agent's code." }, "code": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Code", "description": "The current source code of the agent, as a JSON-formatted string." }, "timestamp": { "anyOf": [ { "type": "string", "format": "date-time" }, { "type": "null" } ], "title": "Timestamp", "description": "Timestamp of the last code update." } }, "type": "object", "title": "AgentCode" }, "AgentCodeDigest": { "properties": { "digest": { "type": "string", "title": "Digest", "description": "SHA256 digest of the agent's updated code." } }, "type": "object", "required": [ "digest" ], "title": "AgentCodeDigest" }, "AgentGeolocation": { "properties": { "latitude": { "type": "number", "maximum": 90.0, "minimum": -90.0, "title": "Latitude" }, "longitude": { "type": "number", "maximum": 180.0, "minimum": -180.0, "title": "Longitude" }, "radius": { "type": "number", "exclusiveMinimum": 0.0, "title": "Radius", "default": 0.5 } }, "type": "object", "required": [ "latitude", "longitude" ], "title": "AgentGeolocation" }, "AgentLog": { "properties": { "log_timestamp": { "type": "string", "format": "date-time", "title": "Log Timestamp" }, "log_entry": { "type": "string", "title": "Log Entry" }, "log_type": { "$ref": "#/components/schemas/LogType", "default": "execution" }, "log_level": { "$ref": "#/components/schemas/LogLevel", "default": "info" } }, "type": "object", "required": [ "log_timestamp", "log_entry" ], "title": "AgentLog" }, "AgentMetadata": { "properties": { "geolocation": { "anyOf": [ { "$ref": "#/components/schemas/AgentGeolocation" }, { "type": "null" } ] } }, "additionalProperties": true, "type": "object", "title": "AgentMetadata", "description": "Model used to validate metadata for an agent.\n\nFramework specific fields will be added here to ensure valid serialization.\nAdditional fields will simply be passed through." }, "AgentNetwork": { "type": "string", "enum": [ "mainnet", "testnet" ], "title": "AgentNetwork" }, "AgentSummary": { "properties": { "name": { "type": "string", "title": "Name", "description": "Name of the agent." }, "address": { "type": "string", "title": "Address", "description": "Bech32 address of the agent." }, "domain": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Domain", "description": "Domain name associated with the agent." }, "prefix": { "anyOf": [ { "type": "string", "enum": [ "agent", "test-agent" ] }, { "type": "null" } ], "title": "Prefix", "description": "Address prefix of the agent.", "default": "test-agent" }, "running": { "type": "boolean", "title": "Running", "description": "Whether the agent is currently running." }, "compiled": { "anyOf": [ { "type": "boolean" }, { "type": "null" } ], "title": "Compiled", "description": "Whether the agent code has been compiled." }, "code_digest": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Code Digest", "description": "Digest of the agent's code." }, "wallet_address": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Wallet Address", "description": "Wallet address of the agent." }, "code_update_timestamp": { "anyOf": [ { "type": "string", "format": "date-time" }, { "type": "null" } ], "title": "Code Update Timestamp", "description": "Last time the code was updated." }, "creation_timestamp": { "anyOf": [ { "type": "string", "format": "date-time" }, { "type": "null" } ], "title": "Creation Timestamp", "description": "Time when the agent was created." }, "avatar_url": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Avatar Url", "description": "URL to the agent's avatar image." } }, "type": "object", "required": [ "name", "address", "running" ], "title": "AgentSummary" }, "Empty": { "properties": {}, "type": "object", "title": "Empty" }, "Envelope": { "properties": { "version": { "type": "integer", "title": "Version" }, "sender": { "type": "string", "title": "Sender" }, "target": { "type": "string", "title": "Target" }, "session": { "type": "string", "format": "uuid4", "title": "Session" }, "schema_digest": { "type": "string", "title": "Schema Digest" }, "protocol_digest": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Protocol Digest" }, "payload": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Payload" }, "expires": { "anyOf": [ { "type": "integer" }, { "type": "null" } ], "title": "Expires" }, "nonce": { "anyOf": [ { "type": "integer" }, { "type": "null" } ], "title": "Nonce" }, "signature": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Signature" } }, "type": "object", "required": [ "version", "sender", "target", "session", "schema_digest" ], "title": "Envelope", "description": "Represents an envelope for message communication between agents.\n\nAttributes:\n version (int): The envelope version.\n sender (str): The sender's address.\n target (str): The target's address.\n session (UUID4): The session UUID that persists for back-and-forth\n dialogues between agents.\n schema_digest (str): The schema digest for the enclosed message.\n protocol_digest (str | None): The digest of the protocol associated with the message\n (optional).\n payload (str | None): The encoded message payload of the envelope (optional).\n expires (int | None): The expiration timestamp (optional).\n nonce (int | None): The nonce value (optional).\n signature (str | None): The envelope signature (optional)." }, "HTTPValidationError": { "properties": { "detail": { "items": { "$ref": "#/components/schemas/ValidationError" }, "type": "array", "title": "Detail" } }, "type": "object", "title": "HTTPValidationError" }, "HistoricalInteractions": { "properties": { "data_points": { "additionalProperties": { "type": "integer" }, "type": "object", "title": "Data Points", "description": "Dictionary mapping dates to interaction counts." }, "total_interactions": { "type": "integer", "title": "Total Interactions", "description": "Total number of interactions." } }, "type": "object", "required": [ "data_points", "total_interactions" ], "title": "HistoricalInteractions" }, "InteractionPeriod": { "type": "string", "enum": [ "Total", "NinetyDays", "ThirtyDays", "SevenDays", "OneDay" ], "title": "InteractionPeriod" }, "LogLevel": { "type": "string", "enum": [ "trce", "debg", "info", "erro" ], "title": "LogLevel" }, "LogType": { "type": "string", "enum": [ "execution", "system" ], "title": "LogType" }, "NewAgent": { "properties": { "name": { "type": "string", "title": "Name", "description": "Name of the new agent." }, "readme": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Readme", "description": "Readme content for the agent." }, "avatar_url": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Avatar Url", "description": "URL of the agent's avatar." }, "short_description": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Short Description", "description": "Brief description." }, "network": { "$ref": "#/components/schemas/AgentNetwork", "description": "Network on which the agent will register (mainnet or testnet)", "default": "testnet" } }, "type": "object", "required": [ "name" ], "title": "NewAgent" }, "NewDomainName": { "properties": { "domain_name": { "type": "string", "title": "Domain Name", "description": "The new domain name to register for the agent." } }, "type": "object", "required": [ "domain_name" ], "title": "NewDomainName" }, "PublicAgent": { "properties": { "name": { "type": "string", "title": "Name", "description": "Name of the agent." }, "author_username": { "type": "string", "title": "Author Username", "description": "Username of the agent's author." }, "address": { "type": "string", "title": "Address", "description": "Bech32 address of the agent." }, "domain": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Domain", "description": "Custom domain for the agent." }, "prefix": { "anyOf": [ { "type": "string", "enum": [ "agent", "test-agent" ] }, { "type": "null" } ], "title": "Prefix", "description": "Address prefix for the agent.", "default": "test-agent" }, "running": { "type": "boolean", "title": "Running", "description": "Indicates if the agent is currently running." }, "readme": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Readme", "description": "README text for the agent." }, "short_description": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Short Description", "description": "Short description for the agent." }, "total_interactions": { "type": "integer", "title": "Total Interactions", "description": "Number of total interactions the agent has had." }, "last_updated_at": { "type": "string", "format": "date-time", "title": "Last Updated At", "description": "Timestamp when the agent was last updated." }, "created_at": { "type": "string", "format": "date-time", "title": "Created At", "description": "Timestamp when the agent was created." }, "maintainer_id": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Maintainer Id", "description": "User ID of the agent maintainer." }, "avatar_url": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Avatar Url", "description": "URL of the agent's avatar." }, "metadata": { "anyOf": [ { "$ref": "#/components/schemas/AgentMetadata" }, { "type": "null" } ], "description": "Metadata associated with the agent." } }, "type": "object", "required": [ "name", "author_username", "address", "running", "total_interactions", "last_updated_at", "created_at" ], "title": "PublicAgent" }, "Secret": { "properties": { "name": { "type": "string", "title": "Name", "description": "Name of the secret." }, "secret": { "type": "string", "title": "Secret", "description": "Masked secret value." }, "timestamp": { "anyOf": [ { "type": "string", "format": "date-time" }, { "type": "null" } ], "title": "Timestamp", "description": "Timestamp of creation." } }, "type": "object", "required": [ "name", "secret" ], "title": "Secret" }, "SecretCreate": { "properties": { "address": { "type": "string", "title": "Address", "description": "Address of the agent associated with this secret." }, "name": { "type": "string", "title": "Name", "description": "Identifier for the secret; must be a valid Python identifier." }, "secret": { "type": "string", "title": "Secret", "description": "Sensitive data to be stored securely." } }, "type": "object", "required": [ "address", "name", "secret" ], "title": "SecretCreate" }, "SecretList": { "properties": { "secrets": { "items": { "$ref": "#/components/schemas/Secret" }, "type": "array", "title": "Secrets", "description": "List containing metadata of all stored secrets, with masked secret values." } }, "type": "object", "required": [ "secrets" ], "title": "SecretList" }, "StorageItem": { "properties": { "key": { "type": "string", "title": "Key", "description": "The key identifying the storage item." }, "value": { "type": "string", "title": "Value", "description": "The stored value corresponding to the key." } }, "type": "object", "required": [ "key", "value" ], "title": "StorageItem" }, "StorageItemUpdate": { "properties": { "value": { "type": "string", "title": "Value", "description": "The new value to update for the specified storage key." } }, "type": "object", "required": [ "value" ], "title": "StorageItemUpdate" }, "UpdateAgent": { "properties": { "name": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Name", "description": "Updated agent's display name." }, "readme": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Readme", "description": "Updated README content." }, "avatar_url": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Avatar Url", "description": "New URL for the agent avatar image." }, "short_description": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Short Description", "description": "Short description of the agent." } }, "type": "object", "title": "UpdateAgent" }, "UpdateAgentCode": { "properties": { "code": { "type": "string", "title": "Code", "description": "The updated source code for the agent, formatted as a JSON string containing files and content." } }, "type": "object", "required": [ "code" ], "title": "UpdateAgentCode" }, "UpdateAgentNetwork": { "properties": { "network": { "$ref": "#/components/schemas/AgentNetwork", "description": "Specifies the target network (mainnet or testnet) to update for the agent.", "default": "testnet" } }, "type": "object", "title": "UpdateAgentNetwork" }, "ValidationError": { "properties": { "loc": { "items": { "anyOf": [ { "type": "string" }, { "type": "integer" } ] }, "type": "array", "title": "Location" }, "msg": { "type": "string", "title": "Message" }, "type": { "type": "string", "title": "Error Type" } }, "type": "object", "required": [ "loc", "msg", "type" ], "title": "ValidationError" }, "WithPagination_AgentSummary_": { "properties": { "items": { "items": { "$ref": "#/components/schemas/AgentSummary" }, "type": "array", "title": "Items" }, "next_cursor": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Next Cursor" } }, "type": "object", "required": [ "items" ], "title": "WithPagination[AgentSummary]" }, "WithPagination_StorageItem_": { "properties": { "items": { "items": { "$ref": "#/components/schemas/StorageItem" }, "type": "array", "title": "Items" }, "next_cursor": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Next Cursor" } }, "type": "object", "required": [ "items" ], "title": "WithPagination[StorageItem]" } }, "securitySchemes": { "FaunaAuthorizationScheme": { "type": "oauth2", "flows": { "authorizationCode": { "scopes": {}, "authorizationUrl": "", "tokenUrl": "token" } } } } } }
