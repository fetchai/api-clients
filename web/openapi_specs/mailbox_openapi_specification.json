{ "openapi": "3.0.0", "info": { "title": "Agentverse Mailbox API", "description": "The Mailbox API handles agent message delivery, registration, storage quotas, and usage tracking within the Agentverse platform. It supports secure agent communication through cryptographic authentication", "version": "1.0.0" }, "servers": [ { "url": "https://agentverse.ai" } ], "paths": { "/v1/submit": { "post": { "tags": [ "exchange" ], "summary": "Submit Message Envelope", "operationId": "submit_message_envelope", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Envelope" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "head": { "tags": [ "exchange" ], "summary": "Agent Readiness Probe", "operationId": "agent_readiness_probe", "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } } } } }, "/v1/mailbox": { "get": { "tags": [ "mailbox" ], "summary": "List Mailbox Messages", "operationId": "list_mailbox_messages", "parameters": [ { "name": "page", "in": "query", "required": false, "schema": { "type": "integer", "minimum": 1, "description": "Page number", "default": 1, "title": "Page" }, "description": "Page number" }, { "name": "size", "in": "query", "required": false, "schema": { "type": "integer", "maximum": 100, "minimum": 1, "description": "Page size", "default": 50, "title": "Size" }, "description": "Page size" }, { "name": "authorization", "in": "header", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Authorization" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Page_StoredEnvelope_" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "delete": { "tags": [ "mailbox" ], "summary": "Delete All Mailbox Messages", "operationId": "delete_all_mailbox_messages", "parameters": [ { "name": "authorization", "in": "header", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Authorization" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/mailbox/{uuid}": { "get": { "tags": [ "mailbox" ], "summary": "Get Specific Envelope", "operationId": "get_specific_envelope", "parameters": [ { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid4", "title": "Uuid" } }, { "name": "authorization", "in": "header", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Authorization" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/StoredEnvelope" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "delete": { "tags": [ "mailbox" ], "summary": "Delete Specific Envelope", "operationId": "delete_specific_envelope", "parameters": [ { "name": "uuid", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid4", "title": "Uuid" } }, { "name": "authorization", "in": "header", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Authorization" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/proxy/submit": { "post": { "tags": [ "exchange" ], "summary": "Submit Message Envelope", "operationId": "submit_proxy_message_envelope", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Envelope" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "head": { "tags": [ "exchange" ], "summary": "Agent Readiness Probe", "operationId": "proxy_agent_readiness_probe", "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } } } } }, "/v1/proxy/resolve/{agent_address}": { "get": { "tags": [ "proxy" ], "summary": "Get Proxy Agent Endpoint", "description": "Get the endpoint for a proxy agent by its address.", "operationId": "get_proxy_agent_endpoint", "parameters": [ { "name": "agent_address", "in": "path", "required": true, "schema": { "type": "string", "title": "Agent Address" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentEndpoint" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/agents": { "post": { "tags": [ "agents" ], "summary": "Register", "operationId": "register_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RegistrationRequest" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/RegistrationResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "get": { "tags": [ "agents" ], "summary": "List User Agents", "operationId": "list_user_agents", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "page", "in": "query", "required": false, "schema": { "type": "integer", "minimum": 1, "description": "Page number", "default": 1, "title": "Page" }, "description": "Page number" }, { "name": "size", "in": "query", "required": false, "schema": { "type": "integer", "maximum": 100, "minimum": 1, "description": "Page size", "default": 50, "title": "Size" }, "description": "Page size" } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Page_Agent_" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/mailroom/teams/{slug}/agents": { "get": { "tags": [ "agents" ], "summary": "List Team Agents", "operationId": "list_team_agents", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "page", "in": "query", "required": false, "schema": { "type": "integer", "minimum": 1, "description": "Page number", "default": 1, "title": "Page" }, "description": "Page number" }, { "name": "size", "in": "query", "required": false, "schema": { "type": "integer", "maximum": 100, "minimum": 1, "description": "Page size", "default": 50, "title": "Size" }, "description": "Page size" } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Page_Agent_" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/agents/{address}": { "get": { "tags": [ "agents" ], "summary": "Get Specific User Agent", "operationId": "get_user_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "put": { "tags": [ "agents" ], "summary": "Update Specific User Agent", "operationId": "update_user_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentUpdates" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "delete": { "tags": [ "agents" ], "summary": "Delete Specific User Agent", "operationId": "delete_user_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/mailroom/teams/{slug}/agents/{address}": { "get": { "tags": [ "agents" ], "summary": "Get Specific Team Agent", "operationId": "get_team_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "put": { "tags": [ "agents" ], "summary": "Update Specific Team Agent", "operationId": "update_team_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AgentUpdates" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Agent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "delete": { "tags": [ "agents" ], "summary": "Delete Specific Team Agent", "operationId": "delete_team_agent", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "slug", "in": "path", "required": true, "schema": { "type": "string", "title": "Slug" } }, { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/agents/{address}/profile": { "get": { "tags": [ "agents" ], "summary": "Get Public Agent Profile", "operationId": "get_public_agent_profile", "parameters": [ { "name": "address", "in": "path", "required": true, "schema": { "type": "string", "title": "Address" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PublicAgent" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/feedback": { "post": { "tags": [ "feedback" ], "summary": "Submit Feedback", "operationId": "submit_authenticated_feedback", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Feedback" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } }, "security": [ { "FaunaAuthorizationScheme": [] } ] } }, "/v1/feedback-anon": { "post": { "tags": [ "feedback" ], "summary": "Submit Anon Feedback", "operationId": "submit_anonymous_feedback", "requestBody": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/FeedbackAnon" } } }, "required": true }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Empty" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } } }, "components": { "schemas": { "Agent": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "Bech32 address of the agent" }, "prefix": { "type": "string", "maxLength": 16, "title": "Prefix", "description": "Prefix to distinguish agent's environment (e.g., 'test-agent')" }, "name": { "type": "string", "maxLength": 80, "minLength": 0, "title": "Name", "description": "Name of the agent" }, "pending_messages": { "type": "integer", "title": "Pending Messages", "description": "Number of pending messages for the agent" }, "bytes_transferred": { "type": "integer", "title": "Bytes Transferred", "description": "Total bytes transferred for this agent" }, "previous_bytes_transferred": { "type": "integer", "title": "Previous Bytes Transferred", "description": "Previously recorded transferred bytes" }, "readme": { "anyOf": [ { "type": "string", "maxLength": 80000 }, { "type": "null" } ], "title": "Readme", "description": "Long description of the agent" }, "avatar_url": { "anyOf": [ { "type": "string", "maxLength": 4000 }, { "type": "null" } ], "title": "Avatar Url", "description": "URL for the agent's avatar" }, "short_description": { "anyOf": [ { "type": "string", "maxLength": 300 }, { "type": "null" } ], "title": "Short Description", "description": "Short summary of the agent" }, "agent_type": { "anyOf": [ { "type": "string", "enum": [ "mailbox", "proxy", "custom" ] }, { "type": "null" } ], "title": "Agent Type", "description": "Type of the agent (mailbox, proxy, custom)" } }, "type": "object", "required": [ "address", "prefix", "name", "pending_messages", "bytes_transferred", "previous_bytes_transferred" ], "title": "Agent" }, "AgentEndpoint": { "properties": { "url": { "type": "string", "title": "Url" }, "weight": { "type": "integer", "title": "Weight" } }, "type": "object", "required": [ "url", "weight" ], "title": "AgentEndpoint" }, "AgentUpdates": { "properties": { "name": { "type": "string", "maxLength": 80, "minLength": 1, "title": "Name", "description": "Updated name of the agent." }, "readme": { "anyOf": [ { "type": "string", "maxLength": 80000 }, { "type": "null" } ], "title": "Readme", "description": "Updated long markdown description of the agent." }, "avatar_url": { "anyOf": [ { "type": "string", "maxLength": 4000 }, { "type": "null" } ], "title": "Avatar Url", "description": "Updated avatar URL of the agent." }, "short_description": { "anyOf": [ { "type": "string", "maxLength": 300 }, { "type": "null" } ], "title": "Short Description", "description": "Updated short summary of the agent." }, "agent_type": { "anyOf": [ { "type": "string", "enum": [ "mailbox", "proxy", "custom" ] }, { "type": "null" } ], "title": "Agent Type", "description": "Updated type of the agent (default is 'mailbox').", "default": "mailbox" } }, "type": "object", "required": [ "name" ], "title": "AgentUpdates" }, "Empty": { "properties": {}, "type": "object", "title": "Empty" }, "Envelope": { "properties": { "version": { "type": "integer", "title": "Version" }, "sender": { "type": "string", "title": "Sender" }, "target": { "type": "string", "title": "Target" }, "session": { "type": "string", "format": "uuid4", "title": "Session" }, "schema_digest": { "type": "string", "title": "Schema Digest" }, "protocol_digest": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Protocol Digest" }, "payload": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Payload" }, "expires": { "anyOf": [ { "type": "integer" }, { "type": "null" } ], "title": "Expires" }, "nonce": { "anyOf": [ { "type": "integer" }, { "type": "null" } ], "title": "Nonce" }, "signature": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Signature" } }, "type": "object", "required": [ "version", "sender", "target", "session", "schema_digest" ], "title": "Envelope" }, "Feedback": { "properties": { "score": { "type": "integer", "maximum": 4.0, "minimum": 1.0, "title": "Score", "description": "Feedback score between 1 (bad) and 4 (excellent)." }, "feedback": { "type": "string", "title": "Feedback", "description": "Detailed user feedback or comment." } }, "type": "object", "required": [ "score", "feedback" ], "title": "Feedback" }, "FeedbackAnon": { "properties": { "source": { "type": "string", "title": "Source", "description": "Source identifier" }, "feedback": { "type": "string", "title": "Feedback", "description": "Anonymous user feedback or comment." } }, "type": "object", "required": [ "source", "feedback" ], "title": "FeedbackAnon" }, "HTTPValidationError": { "properties": { "detail": { "items": { "$ref": "#/components/schemas/ValidationError" }, "type": "array", "title": "Detail" } }, "type": "object", "title": "HTTPValidationError" }, "Page_Agent_": { "properties": { "items": { "items": { "$ref": "#/components/schemas/Agent" }, "type": "array", "title": "Items" }, "total": { "anyOf": [ { "type": "integer", "minimum": 0.0 }, { "type": "null" } ], "title": "Total" }, "page": { "anyOf": [ { "type": "integer", "minimum": 1.0 }, { "type": "null" } ], "title": "Page" }, "size": { "anyOf": [ { "type": "integer", "minimum": 1.0 }, { "type": "null" } ], "title": "Size" }, "pages": { "anyOf": [ { "type": "integer", "minimum": 0.0 }, { "type": "null" } ], "title": "Pages" } }, "type": "object", "required": [ "items", "total", "page", "size" ], "title": "Page[Agent]" }, "Page_StoredEnvelope_": { "properties": { "items": { "items": { "$ref": "#/components/schemas/StoredEnvelope" }, "type": "array", "title": "Items" }, "total": { "anyOf": [ { "type": "integer", "minimum": 0.0 }, { "type": "null" } ], "title": "Total" }, "page": { "anyOf": [ { "type": "integer", "minimum": 1.0 }, { "type": "null" } ], "title": "Page" }, "size": { "anyOf": [ { "type": "integer", "minimum": 1.0 }, { "type": "null" } ], "title": "Size" }, "pages": { "anyOf": [ { "type": "integer", "minimum": 0.0 }, { "type": "null" } ], "title": "Pages" } }, "type": "object", "required": [ "items", "total", "page", "size" ], "title": "Page[StoredEnvelope]" }, "PublicAgent": { "properties": { "address": { "type": "string", "pattern": "^agent1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{59}$", "title": "Address", "description": "Bech32 address of the public agent." }, "prefix": { "type": "string", "maxLength": 16, "title": "Prefix", "description": "Environment prefix, typically 'test-agent'.", "default": "test-agent" }, "name": { "type": "string", "maxLength": 80, "minLength": 1, "title": "Name", "description": "Name of the public agent." }, "readme": { "anyOf": [ { "type": "string", "maxLength": 80000 }, { "type": "null" } ], "title": "Readme", "description": "Full markdown description of the agent." }, "avatar_url": { "anyOf": [ { "type": "string", "maxLength": 4000 }, { "type": "null" } ], "title": "Avatar Url", "description": "URL of the public avatar for the agent." }, "short_description": { "anyOf": [ { "type": "string", "maxLength": 300 }, { "type": "null" } ], "title": "Short Description", "description": "One-line description or tagline for the agent." } }, "type": "object", "required": [ "address", "name" ], "title": "PublicAgent" }, "RegistrationRequest": { "properties": { "address": { "type": "string", "title": "Address" }, "prefix": { "anyOf": [ { "type": "string", "enum": [ "agent", "test-agent" ] }, { "type": "null" } ], "title": "Prefix", "default": "test-agent" }, "challenge": { "type": "string", "title": "Challenge" }, "challenge_response": { "type": "string", "title": "Challenge Response" }, "agent_type": { "type": "string", "enum": [ "mailbox", "proxy", "custom" ], "title": "Agent Type" }, "endpoint": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Endpoint" } }, "type": "object", "required": [ "address", "challenge", "challenge_response", "agent_type" ], "title": "RegistrationRequest" }, "RegistrationResponse": { "properties": { "success": { "type": "boolean", "title": "Success", "description": "Agent registration was successful." } }, "type": "object", "required": [ "success" ], "title": "RegistrationResponse" }, "StoredEnvelope": { "properties": { "uuid": { "type": "string", "format": "uuid4", "title": "Uuid" }, "envelope": { "$ref": "#/components/schemas/Envelope" }, "received_at": { "type": "string", "format": "date-time", "title": "Received At" }, "expires_at": { "type": "string", "format": "date-time", "title": "Expires At" } }, "type": "object", "required": [ "uuid", "envelope", "received_at", "expires_at" ], "title": "StoredEnvelope" }, "ValidationError": { "properties": { "loc": { "items": { "anyOf": [ { "type": "string" }, { "type": "integer" } ] }, "type": "array", "title": "Location" }, "msg": { "type": "string", "title": "Message" }, "type": { "type": "string", "title": "Error Type" } }, "type": "object", "required": [ "loc", "msg", "type" ], "title": "ValidationError" } }, "securitySchemes": { "FaunaAuthorizationScheme": { "type": "oauth2", "flows": { "authorizationCode": { "scopes": {}, "authorizationUrl": "", "tokenUrl": "token" } } } } } }
