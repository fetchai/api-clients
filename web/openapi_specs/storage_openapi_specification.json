{ "openapi": "3.0.0", "info": { "title": "Storage API", "description": "\nThe storage service is an Agentverse service that makes it easier for users and agents to transfer assets. \nFor this initial use case, we will not be support the agent to agent use case.\n\nIn this way, users of Agentverse can create assets and set permissions for these assets to other users. \nImportantly only the User \u2194 [Agent] interactions are supported. \nThe user is always in control and must always create the asset which can the agents are interacting with.\n\nThis is an ephemeral storage engine, and is only expected to be used for short periods of time.\n", "version": "0.1.0" }, "paths": { "/v1/storage/assets/{asset_id}/contents/": { "get": { "summary": "Download Asset", "description": "Download asset contents.", "operationId": "download_asset_contents", "parameters": [ { "name": "asset_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid4", "title": "Asset Id" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AssetDownload" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "put": { "summary": "Upload Asset Contents", "description": "Upload the asset contents.", "operationId": "upload_asset_contents", "parameters": [ { "name": "asset_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid4", "title": "Asset Id" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AssetContent" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UploadAssetResponse" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/storage/assets/": { "get": { "summary": "List Assets", "description": "List user assets.", "operationId": "list_user_assets", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "offset", "in": "query", "required": false, "schema": { "type": "integer", "default": 0, "title": "Offset" } }, { "name": "limit", "in": "query", "required": false, "schema": { "type": "integer", "default": 100, "title": "Limit" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/AssetsList" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "post": { "summary": "Create Asset Metadata", "description": "Create asset metadata, including its object reference.", "operationId": "create_asset_metadata", "security": [ { "FaunaAuthorizationScheme": [] } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NewAsset" } } } }, "responses": { "201": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Asset" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/storage/assets/{identifier}/": { "get": { "summary": "Retrieve Asset", "description": "Retrieves asset metadata details.", "operationId": "get_asset_metadata", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "identifier", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid4", "title": "Identifier" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Asset" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/storage/assets/{asset_id}/": { "delete": { "summary": "Delete Asset", "description": "Delete asset metadata and contents.", "operationId": "delete_asset", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "asset_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid4", "title": "Asset Id" } } ], "responses": { "204": { "description": "Successful Response" }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } }, "/v1/storage/assets/{asset_id}/permissions/": { "get": { "summary": "List Asset Permissions", "operationId": "list_asset_permissions", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "asset_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid4", "title": "Asset Id" } }, { "name": "agent_address", "in": "query", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Agent Address" } }, { "name": "offset", "in": "query", "required": false, "schema": { "type": "integer", "default": 0, "title": "Offset" } }, { "name": "limit", "in": "query", "required": false, "schema": { "type": "integer", "default": 100, "title": "Limit" } } ], "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/PermissionList" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "put": { "summary": "Add Permission", "operationId": "add_asset_permission", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "asset_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid4", "title": "Asset Id" } } ], "requestBody": { "required": true, "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NewPermission" } } } }, "responses": { "200": { "description": "Successful Response", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Permission" } } } }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } }, "delete": { "summary": "Delete Asset Permission For An Agent", "operationId": "delete_asset_permission", "security": [ { "FaunaAuthorizationScheme": [] } ], "parameters": [ { "name": "asset_id", "in": "path", "required": true, "schema": { "type": "string", "format": "uuid4", "title": "Asset Id" } }, { "name": "agent_address", "in": "query", "required": false, "schema": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "description": "The agent's address", "title": "Agent Address" }, "description": "The agent's address" } ], "responses": { "204": { "description": "Successful Response" }, "422": { "description": "Validation Error", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/HTTPValidationError" } } } } } } } }, "components": { "schemas": { "Asset": { "properties": { "asset_id": { "type": "string", "format": "uuid4", "title": "Asset Id", "description": "Unique identifier of the asset." }, "mime_type": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Mime Type", "description": "MIME type of the asset (if known)." }, "size": { "type": "integer", "title": "Size", "description": "Size of the asset in bytes." }, "checksum": { "type": "string", "title": "Checksum", "description": "SHA-256 checksum of the asset content." }, "expires_at": { "type": "string", "format": "date-time", "title": "Expires At", "description": "Datetime when the asset will expire." }, "created_at": { "type": "string", "format": "date-time", "title": "Created At", "description": "Datetime when the asset was created." }, "updated_at": { "type": "string", "format": "date-time", "title": "Updated At", "description": "Datetime when the asset was last updated." }, "reference": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Reference", "description": "Storage reference URI for the asset." }, "protocol": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Protocol", "description": "Protocol-formatted reference URI (auto-generated)." } }, "type": "object", "required": [ "asset_id", "size", "checksum", "expires_at", "created_at", "updated_at" ], "title": "Asset" }, "AssetContent": { "properties": { "mime_type": { "type": "string", "title": "Mime Type", "description": "MIME type of the asset content (e.g., 'image/png')." }, "contents": { "type": "string", "title": "Contents", "description": "Base64-encoded string representing the asset contents." } }, "type": "object", "required": [ "mime_type", "contents" ], "title": "AssetContent" }, "AssetDownload": { "properties": { "asset_id": { "type": "string", "format": "uuid4", "title": "Asset Id", "description": "Unique identifier of the asset." }, "contents": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Contents", "description": "Base64-encoded contents of the asset (if not streamed)." }, "mime_type": { "type": "string", "title": "Mime Type", "description": "MIME type of the asset (e.g., 'application/pdf')." }, "expires_at": { "type": "string", "format": "date-time", "title": "Expires At", "description": "Datetime when the asset will expire." }, "reference": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Reference", "description": "Storage reference URI for the asset." } }, "type": "object", "required": [ "asset_id", "mime_type", "expires_at" ], "title": "AssetDownload" }, "AssetsList": { "properties": { "items": { "items": { "$ref": "#/components/schemas/Asset" }, "type": "array", "title": "Items", "description": "List of assets retrieved." }, "pagination": { "$ref": "#/components/schemas/Pagination", "description": "Pagination metadata for the list of assets." } }, "type": "object", "required": [ "items", "pagination" ], "title": "AssetsList" }, "HTTPValidationError": { "properties": { "detail": { "items": { "$ref": "#/components/schemas/ValidationError" }, "type": "array", "title": "Detail" } }, "type": "object", "title": "HTTPValidationError" }, "NewAsset": { "properties": { "lifetime_hours": { "type": "integer", "maximum": 24.0, "minimum": 1.0, "title": "Lifetime Hours", "description": "Asset lifetime in hours (1\u201324)." }, "mime_type": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Mime Type", "description": "MIME type of the asset (e.g., 'application/json')." }, "contents": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Contents", "description": "Base64-encoded contents of the asset (optional)." }, "name": { "anyOf": [ { "type": "string" }, { "type": "null" } ], "title": "Name", "description": "Optional human-readable name for the asset." } }, "type": "object", "required": [ "lifetime_hours" ], "title": "NewAsset" }, "NewPermission": { "properties": { "agent_address": { "type": "string", "title": "Agent Address", "description": "Address of the agent to whom the permission applies." }, "read": { "type": "boolean", "title": "Read", "description": "Whether the agent has read access." }, "write": { "type": "boolean", "title": "Write", "description": "Whether the agent has write access." } }, "type": "object", "required": [ "agent_address", "read", "write" ], "title": "NewPermission" }, "Pagination": { "properties": { "offset": { "type": "integer", "title": "Offset", "description": "Number of items to skip before starting to collect the result set." }, "limit": { "type": "integer", "title": "Limit", "description": "Maximum number of items to return." }, "total": { "type": "integer", "title": "Total", "description": "Total number of items available." } }, "type": "object", "required": [ "offset", "limit", "total" ], "title": "Pagination" }, "Permission": { "properties": { "agent_address": { "type": "string", "title": "Agent Address", "description": "Address of the agent to whom the permission applies." }, "read": { "type": "boolean", "title": "Read", "description": "Whether the agent has read access." }, "write": { "type": "boolean", "title": "Write", "description": "Whether the agent has write access." } }, "type": "object", "required": [ "agent_address", "read", "write" ], "title": "Permission" }, "PermissionList": { "properties": { "items": { "items": { "$ref": "#/components/schemas/Permission" }, "type": "array", "title": "Items", "description": "List of permission entries." }, "pagination": { "$ref": "#/components/schemas/Pagination", "description": "Pagination metadata for the permission list." } }, "type": "object", "required": [ "items", "pagination" ], "title": "PermissionList" }, "UploadAssetResponse": { "properties": { "asset_id": { "type": "string", "format": "uuid4", "title": "Asset Id", "description": "Unique identifier of the uploaded asset." }, "reference": { "type": "string", "title": "Reference", "description": "Internal reference string pointing to the stored asset." } }, "type": "object", "required": [ "asset_id", "reference" ], "title": "UploadAssetResponse" }, "ValidationError": { "properties": { "loc": { "items": { "anyOf": [ { "type": "string" }, { "type": "integer" } ] }, "type": "array", "title": "Location" }, "msg": { "type": "string", "title": "Message" }, "type": { "type": "string", "title": "Error Type" } }, "type": "object", "required": [ "loc", "msg", "type" ], "title": "ValidationError" } }, "securitySchemes": { "FaunaAuthorizationScheme": { "type": "oauth2", "flows": { "authorizationCode": { "scopes": {}, "authorizationUrl": "", "tokenUrl": "token" } } } } } }
