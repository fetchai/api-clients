# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from search_api_client.models.agent_geo_location import AgentGeoLocation
from search_api_client.models.protocol import Protocol
from typing import Optional, Set
from typing_extensions import Self

class Agent(BaseModel):
    """
    Agent
    """ # noqa: E501
    address: StrictStr
    name: StrictStr
    readme: StrictStr
    protocols: List[Protocol]
    avatar_href: Optional[StrictStr]
    total_interactions: StrictInt
    recent_interactions: StrictInt
    rating: Optional[Union[StrictFloat, StrictInt]]
    status: StrictStr
    type: StrictStr
    category: StrictStr
    featured: Optional[StrictBool] = False
    geo_location: Optional[AgentGeoLocation]
    last_updated: datetime
    created_at: datetime
    __properties: ClassVar[List[str]] = ["address", "name", "readme", "protocols", "avatar_href", "total_interactions", "recent_interactions", "rating", "status", "type", "category", "featured", "geo_location", "last_updated", "created_at"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['active', 'inactive']):
            raise ValueError("must be one of enum values ('active', 'inactive')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['hosted', 'local', 'mailbox']):
            raise ValueError("must be one of enum values ('hosted', 'local', 'mailbox')")
        return value

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['fetch-ai', 'verified', 'community']):
            raise ValueError("must be one of enum values ('fetch-ai', 'verified', 'community')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Agent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in protocols (list)
        _items = []
        if self.protocols:
            for _item_protocols in self.protocols:
                if _item_protocols:
                    _items.append(_item_protocols.to_dict())
            _dict['protocols'] = _items
        # override the default output from pydantic by calling `to_dict()` of geo_location
        if self.geo_location:
            _dict['geo_location'] = self.geo_location.to_dict()
        # set to None if avatar_href (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_href is None and "avatar_href" in self.model_fields_set:
            _dict['avatar_href'] = None

        # set to None if rating (nullable) is None
        # and model_fields_set contains the field
        if self.rating is None and "rating" in self.model_fields_set:
            _dict['rating'] = None

        # set to None if geo_location (nullable) is None
        # and model_fields_set contains the field
        if self.geo_location is None and "geo_location" in self.model_fields_set:
            _dict['geo_location'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Agent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "name": obj.get("name"),
            "readme": obj.get("readme"),
            "protocols": [Protocol.from_dict(_item) for _item in obj["protocols"]] if obj.get("protocols") is not None else None,
            "avatar_href": obj.get("avatar_href"),
            "total_interactions": obj.get("total_interactions"),
            "recent_interactions": obj.get("recent_interactions"),
            "rating": obj.get("rating"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "category": obj.get("category"),
            "featured": obj.get("featured") if obj.get("featured") is not None else False,
            "geo_location": AgentGeoLocation.from_dict(obj["geo_location"]) if obj.get("geo_location") is not None else None,
            "last_updated": obj.get("last_updated"),
            "created_at": obj.get("created_at")
        })
        return _obj


